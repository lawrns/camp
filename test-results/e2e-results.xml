<testsuites id="" name="" tests="2800" failures="56" skipped="2707" errors="0" time="309.290232">
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="5" failures="5" skipped="0" time="92.84" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="18.747">
<failure message="bidirectional-communication-auth-test.spec.ts:4:7 should test authenticated bidirectional communication" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication-auth-test.spec.ts:4:7 › Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication 

    TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      20 |       
      21 |       // Wait for login to complete
    > 22 |       await page.waitForURL(/\/dashboard/, { timeout: 10000 });
         |                  ^
      23 |       console.log('✅ Login successful');
      24 |       
      25 |       // Navigate to conversations
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication-auth-test.spec.ts:22:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-0c5a5-bidirectional-communication-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-0c5a5-bidirectional-communication-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/bidirectional-communicatio-0c5a5-bidirectional-communication-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[🔐 Testing authenticated bidirectional communication...
✅ Login page loaded

[[ATTACHMENT|bidirectional-communicatio-0c5a5-bidirectional-communication-chromium/test-failed-1.png]]

[[ATTACHMENT|bidirectional-communicatio-0c5a5-bidirectional-communication-chromium/video.webm]]

[[ATTACHMENT|bidirectional-communicatio-0c5a5-bidirectional-communication-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="18.46">
<failure message="bidirectional-communication-auth-test.spec.ts:51:7 should test widget with authentication" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication-auth-test.spec.ts:51:7 › Bidirectional Communication with Authentication Test › should test widget with authentication 

    TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      61 |       await page.fill('input[type="password"], #password', 'password123');
      62 |       await page.click('button[type="submit"]');
    > 63 |       await page.waitForURL(/\/dashboard/, { timeout: 10000 });
         |                  ^
      64 |       
      65 |       // Now test widget with authentication
      66 |       await page.goto('http://localhost:3001/widget-demo');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication-auth-test.spec.ts:63:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-b18c2--widget-with-authentication-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-b18c2--widget-with-authentication-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/bidirectional-communicatio-b18c2--widget-with-authentication-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[🔧 Testing widget with authentication...

[[ATTACHMENT|bidirectional-communicatio-b18c2--widget-with-authentication-chromium/test-failed-1.png]]

[[ATTACHMENT|bidirectional-communicatio-b18c2--widget-with-authentication-chromium/video.webm]]

[[ATTACHMENT|bidirectional-communicatio-b18c2--widget-with-authentication-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="18.633">
<failure message="bidirectional-communication-auth-test.spec.ts:91:7 should test AI handover functionality" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication-auth-test.spec.ts:91:7 › Bidirectional Communication with Authentication Test › should test AI handover functionality 

    TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      101 |       await page.fill('input[type="password"], #password', 'password123');
      102 |       await page.click('button[type="submit"]');
    > 103 |       await page.waitForURL(/\/dashboard/, { timeout: 10000 });
          |                  ^
      104 |       
      105 |       // Navigate to inbox to test AI handover
      106 |       await page.goto('http://localhost:3001/dashboard/inbox');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication-auth-test.spec.ts:103:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-f7851-t-AI-handover-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-f7851-t-AI-handover-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/bidirectional-communicatio-f7851-t-AI-handover-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[🤖 Testing AI handover functionality...

[[ATTACHMENT|bidirectional-communicatio-f7851-t-AI-handover-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|bidirectional-communicatio-f7851-t-AI-handover-functionality-chromium/video.webm]]

[[ATTACHMENT|bidirectional-communicatio-f7851-t-AI-handover-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="18.457">
<failure message="bidirectional-communication-auth-test.spec.ts:133:7 should test message sending and receiving" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication-auth-test.spec.ts:133:7 › Bidirectional Communication with Authentication Test › should test message sending and receiving 

    TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      143 |       await page.fill('input[type="password"], #password', 'password123');
      144 |       await page.click('button[type="submit"]');
    > 145 |       await page.waitForURL(/\/dashboard/, { timeout: 10000 });
          |                  ^
      146 |       
      147 |       // Navigate to a conversation or create one
      148 |       await page.goto('http://localhost:3001/dashboard/conversations');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication-auth-test.spec.ts:145:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-054d4-ssage-sending-and-receiving-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-054d4-ssage-sending-and-receiving-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/bidirectional-communicatio-054d4-ssage-sending-and-receiving-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[💬 Testing message sending and receiving...

[[ATTACHMENT|bidirectional-communicatio-054d4-ssage-sending-and-receiving-chromium/test-failed-1.png]]

[[ATTACHMENT|bidirectional-communicatio-054d4-ssage-sending-and-receiving-chromium/video.webm]]

[[ATTACHMENT|bidirectional-communicatio-054d4-ssage-sending-and-receiving-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="18.543">
<failure message="bidirectional-communication-auth-test.spec.ts:183:7 should test realtime connection stability" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication-auth-test.spec.ts:183:7 › Bidirectional Communication with Authentication Test › should test realtime connection stability 

    TimeoutError: page.waitForURL: Timeout 10000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      193 |       await page.fill('input[type="password"], #password', 'password123');
      194 |       await page.click('button[type="submit"]');
    > 195 |       await page.waitForURL(/\/dashboard/, { timeout: 10000 });
          |                  ^
      196 |       
      197 |       // Navigate to dashboard and monitor connections
      198 |       await page.goto('http://localhost:3001/dashboard');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication-auth-test.spec.ts:195:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-0133f-altime-connection-stability-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/bidirectional-communicatio-0133f-altime-connection-stability-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/bidirectional-communicatio-0133f-altime-connection-stability-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[🔗 Testing realtime connection stability...

[[ATTACHMENT|bidirectional-communicatio-0133f-altime-connection-stability-chromium/test-failed-1.png]]

[[ATTACHMENT|bidirectional-communicatio-0133f-altime-connection-stability-chromium/video.webm]]

[[ATTACHMENT|bidirectional-communicatio-0133f-altime-connection-stability-chromium/error-context.md]]
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="0" time="119.444" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="3.399">
<system-out>
<![CDATA[🧪 Testing basic functionality with correct URLs...
✅ Homepage loaded successfully
📊 Found 6 buttons and 40 links
✅ Basic functionality test completed
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="13.356">
<system-out>
<![CDATA[🔐 Testing login and dashboard access...
✅ Login page loaded
ℹ️ Login timeout or redirect issue, continuing with current state
✅ Login and dashboard test completed
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="23.881">
<system-out>
<![CDATA[🔧 Testing widget functionality...
✅ Widget container found
📊 Found 5 interactive elements
📊 Captured 0 realtime logs
✅ Widget functionality test completed
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="13.893">
<system-out>
<![CDATA[🔌 Testing API endpoints...
📡 Auth session status: 401
📡 Homepage status: 200
📡 Widget auth status: 404
✅ API endpoints test completed
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="15.39">
<system-out>
<![CDATA[📥 Testing authenticated inbox access...
ℹ️ Login or inbox access issue, continuing
✅ Inbox access test completed
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="19.45">
<system-out>
<![CDATA[🛡️ Testing error handling and database issues...
📡 Read receipts status: 400
📡 Widget messages status: 400
📡 Invalid API status: 404
✅ Error handling test completed
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="13.326">
<system-out>
<![CDATA[📡 Testing realtime connection monitoring...
🔍 REALTIME: [Widget Supabase] 20:41:24 - Supabase client status changed to: connected undefined
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
📊 Captured 5 realtime logs
✅ No unexpected error logs detected
✅ Realtime monitoring completed
🔍 REALTIME: [Widget Realtime] 20:41:28 - 🚀 Starting enhanced real-time connection {channelName: org:b5e80170-004c-4e82-a88c-3e2166b169dd:conv:3aaf809a-385d-4d08-b356-612b122af3fa, organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 3aaf809a-385d-4d08-b356-612b122af3fa}
🔍 REALTIME: [Widget Event] widget_realtime_connect_success: {organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 3aaf809a-385d-4d08-b356-612b122af3fa}
🔍 REALTIME: [Widget Realtime] 20:41:28 - 🔄 Disconnecting channel {state: joining, topic: realtime:org:b5e80170-004c-4e82-a88c-3e2166b169dd:conv:3aaf809a-385d-4d08-b356-612b122af3fa}
🔍 REALTIME: WebSocket connection to 'wss://yvntokkncxbhapqjesti.supabase.co/realtime/v1/websocket?apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl2bnRva2tuY3hiaGFwcWplc3RpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0ODUxNTQsImV4cCI6MjA2MDA2MTE1NH0.iJ4C4AHk0bfBmISvbSekGIAXn7puFL0lGbBwqBd6XTs&eventsPerSecond=10&log_level=debug&vsn=1.0.0' failed: WebSocket is closed before the connection is established.
🔍 REALTIME: [Widget Realtime] 20:41:28 - 🚀 Starting enhanced real-time connection {channelName: org:b5e80170-004c-4e82-a88c-3e2166b169dd:conv:3aaf809a-385d-4d08-b356-612b122af3fa, organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 3aaf809a-385d-4d08-b356-612b122af3fa}
🔍 REALTIME: [Widget Event] widget_realtime_connect_success: {organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 3aaf809a-385d-4d08-b356-612b122af3fa}
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
]]>
</system-out>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="16.749">
<system-out>
<![CDATA[🤖 Testing AI handover with correct URLs...
ℹ️ Login or AI handover access issue, continuing
✅ AI handover test completed
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="6" skipped="0" time="0.02" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0.003">
<failure message="bidirectional-communication.spec.ts:81:7 should establish bidirectional message communication" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:81:7 › Bidirectional Communication E2E › should establish bidirectional message communication 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:143:7 should handle typing indicators bidirectionally" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:143:7 › Bidirectional Communication E2E › should handle typing indicators bidirectionally 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:195:7 should handle presence updates bidirectionally" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:195:7 › Bidirectional Communication E2E › should handle presence updates bidirectionally 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0.012">
<failure message="bidirectional-communication.spec.ts:232:7 should handle message delivery status" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:232:7 › Bidirectional Communication E2E › should handle message delivery status 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0.002">
<failure message="bidirectional-communication.spec.ts:270:7 should handle connection interruption and recovery" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:270:7 › Bidirectional Communication E2E › should handle connection interruption and recovery 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0.003">
<failure message="bidirectional-communication.spec.ts:325:7 should handle concurrent messages from multiple users" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:325:7 › Bidirectional Communication E2E › should handle concurrent messages from multiple users 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="17" failures="17" skipped="0" time="393.802" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="12.318">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:22:7 should load inbox dashboard with all core components" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:22:7 › Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-e1292-rd-with-all-core-components-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-e1292-rd-with-all-core-components-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-e1292-rd-with-all-core-components-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-e1292-rd-with-all-core-components-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-e1292-rd-with-all-core-components-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-e1292-rd-with-all-core-components-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="22.846">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:40:7 should test conversation list functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:40:7 › Comprehensive Inbox Dashboard Test › should test conversation list functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-f1c22-ersation-list-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-f1c22-ersation-list-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-f1c22-ersation-list-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-f1c22-ersation-list-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-f1c22-ersation-list-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-f1c22-ersation-list-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="11.747">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:68:7 should test chat header and customer information" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:68:7 › Comprehensive Inbox Dashboard Test › should test chat header and customer information 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-40630-er-and-customer-information-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-40630-er-and-customer-information-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-40630-er-and-customer-information-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-40630-er-and-customer-information-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-40630-er-and-customer-information-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-40630-er-and-customer-information-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="24.282">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:102:7 should test message list and conversation display" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:102:7 › Comprehensive Inbox Dashboard Test › should test message list and conversation display 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-ec9a8-st-and-conversation-display-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-ec9a8-st-and-conversation-display-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-ec9a8-st-and-conversation-display-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-ec9a8-st-and-conversation-display-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-ec9a8-st-and-conversation-display-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-ec9a8-st-and-conversation-display-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="23.12">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:131:7 should test message composer functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:131:7 › Comprehensive Inbox Dashboard Test › should test message composer functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-698e9-sage-composer-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-698e9-sage-composer-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-698e9-sage-composer-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-698e9-sage-composer-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-698e9-sage-composer-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-698e9-sage-composer-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="12.381">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:159:7 should test AI handover functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:159:7 › Comprehensive Inbox Dashboard Test › should test AI handover functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-a424c-t-AI-handover-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-a424c-t-AI-handover-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-a424c-t-AI-handover-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-a424c-t-AI-handover-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-a424c-t-AI-handover-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-a424c-t-AI-handover-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="14.877">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:188:7 should test customer sidebar functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:188:7 › Comprehensive Inbox Dashboard Test › should test customer sidebar functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-c69df-tomer-sidebar-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-c69df-tomer-sidebar-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-c69df-tomer-sidebar-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-c69df-tomer-sidebar-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-c69df-tomer-sidebar-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-c69df-tomer-sidebar-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="20.813">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:219:7 should test conversation management features" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:219:7 › Comprehensive Inbox Dashboard Test › should test conversation management features 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-e2af8-rsation-management-features-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-e2af8-rsation-management-features-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-e2af8-rsation-management-features-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-e2af8-rsation-management-features-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-e2af8-rsation-management-features-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-e2af8-rsation-management-features-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="19.536">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:247:7 should test bulk actions functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:247:7 › Comprehensive Inbox Dashboard Test › should test bulk actions functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-27799--bulk-actions-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-27799--bulk-actions-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-27799--bulk-actions-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-27799--bulk-actions-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-27799--bulk-actions-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-27799--bulk-actions-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="19.303">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:267:7 should test advanced filters functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:267:7 › Comprehensive Inbox Dashboard Test › should test advanced filters functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-aac7c-anced-filters-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-aac7c-anced-filters-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-aac7c-anced-filters-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-aac7c-anced-filters-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-aac7c-anced-filters-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-aac7c-anced-filters-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="19.114">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:290:7 should test keyboard shortcuts" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:290:7 › Comprehensive Inbox Dashboard Test › should test keyboard shortcuts 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-de2e1-uld-test-keyboard-shortcuts-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-de2e1-uld-test-keyboard-shortcuts-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-de2e1-uld-test-keyboard-shortcuts-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-de2e1-uld-test-keyboard-shortcuts-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-de2e1-uld-test-keyboard-shortcuts-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-de2e1-uld-test-keyboard-shortcuts-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="18.667">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:308:7 should test file upload functionality" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:308:7 › Comprehensive Inbox Dashboard Test › should test file upload functionality 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-764a8-t-file-upload-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-764a8-t-file-upload-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-764a8-t-file-upload-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-764a8-t-file-upload-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-764a8-t-file-upload-functionality-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-764a8-t-file-upload-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="21.226">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:329:7 should test emoji picker and templates" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:329:7 › Comprehensive Inbox Dashboard Test › should test emoji picker and templates 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-81b95--emoji-picker-and-templates-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-81b95--emoji-picker-and-templates-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-81b95--emoji-picker-and-templates-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-81b95--emoji-picker-and-templates-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-81b95--emoji-picker-and-templates-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-81b95--emoji-picker-and-templates-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="17.9">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:361:7 should test real-time features and connections" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:361:7 › Comprehensive Inbox Dashboard Test › should test real-time features and connections 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-0c5a9-me-features-and-connections-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-0c5a9-me-features-and-connections-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-0c5a9-me-features-and-connections-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-0c5a9-me-features-and-connections-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-0c5a9-me-features-and-connections-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-0c5a9-me-features-and-connections-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="59.907">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:386:7 should test performance and loading states" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:386:7 › Comprehensive Inbox Dashboard Test › should test performance and loading states 

    TimeoutError: page.goto: Timeout 30000ms exceeded.
    Call log:
      - navigating to "http://localhost:3001/dashboard/inbox", waiting until "load"


      16 |     
      17 |     // Navigate to inbox
    > 18 |     await page.goto('http://localhost:3001/dashboard/inbox');
         |                ^
      19 |     await page.waitForLoadState('networkidle');
      20 |   });
      21 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:18:16

    attachment #1: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-6bb9f-formance-and-loading-states-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-6bb9f-formance-and-loading-states-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-6bb9f-formance-and-loading-states-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-6bb9f-formance-and-loading-states-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="59.293">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:409:7 should test accessibility features" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:409:7 › Comprehensive Inbox Dashboard Test › should test accessibility features 

    TimeoutError: page.goto: Timeout 30000ms exceeded.
    Call log:
      - navigating to "http://localhost:3001/dashboard/inbox", waiting until "load"


      16 |     
      17 |     // Navigate to inbox
    > 18 |     await page.goto('http://localhost:3001/dashboard/inbox');
         |                ^
      19 |     await page.waitForLoadState('networkidle');
      20 |   });
      21 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:18:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-83797-test-accessibility-features-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-83797-test-accessibility-features-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-83797-test-accessibility-features-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-83797-test-accessibility-features-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-83797-test-accessibility-features-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-83797-test-accessibility-features-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="16.472">
<failure message="comprehensive-inbox-dashboard-test.spec.ts:430:7 should test responsive design and mobile features" type="FAILURE">
<![CDATA[  [chromium] › comprehensive-inbox-dashboard-test.spec.ts:430:7 › Comprehensive Inbox Dashboard Test › should test responsive design and mobile features 

    TimeoutError: page.waitForURL: Timeout 5000ms exceeded.
    =========================== logs ===========================
    waiting for navigation until "load"
    ============================================================

      12 |       await page.fill('input[type="password"], #password', 'password123');
      13 |       await page.click('button[type="submit"]');
    > 14 |       await page.waitForURL(/\/dashboard/, { timeout: 5000 });
         |                  ^
      15 |     }
      16 |     
      17 |     // Navigate to inbox
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/comprehensive-inbox-dashboard-test.spec.ts:14:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-1beda--design-and-mobile-features-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/comprehensive-inbox-dashbo-1beda--design-and-mobile-features-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/comprehensive-inbox-dashbo-1beda--design-and-mobile-features-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|comprehensive-inbox-dashbo-1beda--design-and-mobile-features-chromium/test-failed-1.png]]

[[ATTACHMENT|comprehensive-inbox-dashbo-1beda--design-and-mobile-features-chromium/video.webm]]

[[ATTACHMENT|comprehensive-inbox-dashbo-1beda--design-and-mobile-features-chromium/error-context.md]]
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="5" failures="5" skipped="0" time="0.012" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0.008">
<failure message="multi-user-scenarios.spec.ts:95:7 should handle multiple agents serving different customers" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:95:7 › Multi-User Scenarios E2E › should handle multiple agents serving different customers 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0.001">
<failure message="multi-user-scenarios.spec.ts:190:7 should handle agent handoff scenarios" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:190:7 › Multi-User Scenarios E2E › should handle agent handoff scenarios 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0.001">
<failure message="multi-user-scenarios.spec.ts:262:7 should handle AI to human handover" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:262:7 › Multi-User Scenarios E2E › should handle AI to human handover 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0.002">
<failure message="multi-user-scenarios.spec.ts:335:7 should handle supervisor monitoring and intervention" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:335:7 › Multi-User Scenarios E2E › should handle supervisor monitoring and intervention 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<failure message="multi-user-scenarios.spec.ts:407:7 should handle concurrent message load" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:407:7 › Multi-User Scenarios E2E › should handle concurrent message load 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="4" failures="4" skipped="0" time="0.04" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0.016">
<failure message="performance-load-testing.spec.ts:107:7 should handle high-volume message throughput" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:107:7 › Performance & Load Testing E2E › should handle high-volume message throughput 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0.006">
<failure message="performance-load-testing.spec.ts:202:7 should maintain connection stability under load" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:202:7 › Performance & Load Testing E2E › should maintain connection stability under load 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0.017">
<failure message="performance-load-testing.spec.ts:277:7 should monitor memory usage during extended operation" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:277:7 › Performance & Load Testing E2E › should monitor memory usage during extended operation 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0.001">
<failure message="performance-load-testing.spec.ts:353:7 should handle concurrent typing indicators" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:353:7 › Performance & Load Testing E2E › should handle concurrent typing indicators 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="10" failures="4" skipped="0" time="246.953" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="37.428">
<failure message="robust-inbox-dashboard-test.spec.ts:10:7 should load inbox dashboard structure" type="FAILURE">
<![CDATA[  [chromium] › robust-inbox-dashboard-test.spec.ts:10:7 › Robust Inbox Dashboard Test › should load inbox dashboard structure 

    TimeoutError: page.goto: Timeout 30000ms exceeded.
    Call log:
      - navigating to "http://localhost:3001/dashboard/inbox", waiting until "load"


      4 |   test.beforeEach(async ({ page }) => {
      5 |     // Navigate to inbox directly (skip login if it's causing issues)
    > 6 |     await page.goto('http://localhost:3001/dashboard/inbox');
        |                ^
      7 |     await page.waitForLoadState('networkidle');
      8 |   });
      9 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/robust-inbox-dashboard-test.spec.ts:6:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-0ff22-d-inbox-dashboard-structure-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-0ff22-d-inbox-dashboard-structure-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/robust-inbox-dashboard-tes-0ff22-d-inbox-dashboard-structure-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|robust-inbox-dashboard-tes-0ff22-d-inbox-dashboard-structure-chromium/test-failed-1.png]]

[[ATTACHMENT|robust-inbox-dashboard-tes-0ff22-d-inbox-dashboard-structure-chromium/video.webm]]

[[ATTACHMENT|robust-inbox-dashboard-tes-0ff22-d-inbox-dashboard-structure-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="36.403">
<system-out>
<![CDATA[🔐 Testing authentication flow...
📊 Found 3 login elements
ℹ️ Login form detected, attempting login
✅ Login attempt completed
✅ Authentication flow test completed
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="35.904">
<failure message="robust-inbox-dashboard-test.spec.ts:70:7 should test page navigation and routing" type="FAILURE">
<![CDATA[  [chromium] › robust-inbox-dashboard-test.spec.ts:70:7 › Robust Inbox Dashboard Test › should test page navigation and routing 

    TimeoutError: page.goto: Timeout 30000ms exceeded.
    Call log:
      - navigating to "http://localhost:3001/dashboard/inbox", waiting until "load"


      4 |   test.beforeEach(async ({ page }) => {
      5 |     // Navigate to inbox directly (skip login if it's causing issues)
    > 6 |     await page.goto('http://localhost:3001/dashboard/inbox');
        |                ^
      7 |     await page.waitForLoadState('networkidle');
      8 |   });
      9 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/robust-inbox-dashboard-test.spec.ts:6:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-bc8f9-page-navigation-and-routing-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-bc8f9-page-navigation-and-routing-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/robust-inbox-dashboard-tes-bc8f9-page-navigation-and-routing-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|robust-inbox-dashboard-tes-bc8f9-page-navigation-and-routing-chromium/test-failed-1.png]]

[[ATTACHMENT|robust-inbox-dashboard-tes-bc8f9-page-navigation-and-routing-chromium/video.webm]]

[[ATTACHMENT|robust-inbox-dashboard-tes-bc8f9-page-navigation-and-routing-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="35.502">
<failure message="robust-inbox-dashboard-test.spec.ts:104:7 should test API endpoints and data loading" type="FAILURE">
<![CDATA[  [chromium] › robust-inbox-dashboard-test.spec.ts:104:7 › Robust Inbox Dashboard Test › should test API endpoints and data loading 

    TimeoutError: page.goto: Timeout 30000ms exceeded.
    Call log:
      - navigating to "http://localhost:3001/dashboard/inbox", waiting until "load"


      4 |   test.beforeEach(async ({ page }) => {
      5 |     // Navigate to inbox directly (skip login if it's causing issues)
    > 6 |     await page.goto('http://localhost:3001/dashboard/inbox');
        |                ^
      7 |     await page.waitForLoadState('networkidle');
      8 |   });
      9 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/robust-inbox-dashboard-test.spec.ts:6:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-c28c1--endpoints-and-data-loading-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-c28c1--endpoints-and-data-loading-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/robust-inbox-dashboard-tes-c28c1--endpoints-and-data-loading-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|robust-inbox-dashboard-tes-c28c1--endpoints-and-data-loading-chromium/test-failed-1.png]]

[[ATTACHMENT|robust-inbox-dashboard-tes-c28c1--endpoints-and-data-loading-chromium/video.webm]]

[[ATTACHMENT|robust-inbox-dashboard-tes-c28c1--endpoints-and-data-loading-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="35.64">
<failure message="robust-inbox-dashboard-test.spec.ts:141:7 should test real-time functionality" type="FAILURE">
<![CDATA[  [chromium] › robust-inbox-dashboard-test.spec.ts:141:7 › Robust Inbox Dashboard Test › should test real-time functionality 

    TimeoutError: page.goto: Timeout 30000ms exceeded.
    Call log:
      - navigating to "http://localhost:3001/dashboard/inbox", waiting until "load"


      4 |   test.beforeEach(async ({ page }) => {
      5 |     // Navigate to inbox directly (skip login if it's causing issues)
    > 6 |     await page.goto('http://localhost:3001/dashboard/inbox');
        |                ^
      7 |     await page.waitForLoadState('networkidle');
      8 |   });
      9 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/robust-inbox-dashboard-test.spec.ts:6:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-36198-est-real-time-functionality-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/robust-inbox-dashboard-tes-36198-est-real-time-functionality-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/robust-inbox-dashboard-tes-36198-est-real-time-functionality-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|robust-inbox-dashboard-tes-36198-est-real-time-functionality-chromium/test-failed-1.png]]

[[ATTACHMENT|robust-inbox-dashboard-tes-36198-est-real-time-functionality-chromium/video.webm]]

[[ATTACHMENT|robust-inbox-dashboard-tes-36198-est-real-time-functionality-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="12.016">
<system-out>
<![CDATA[🎨 Testing UI components and interactions...
📊 Found 2 buttons
✅ buttons present
📊 Found 2 inputs
✅ inputs present
📊 Found 0 textareas
📊 Found 0 selects
📊 Found 0 test elements
📊 Found 0 inbox elements
📊 Found 0 conversation elements
📊 Found 0 message elements
📊 Found 0 chat elements
✅ Keyboard navigation working
📊 Found 3 clickable elements
✅ Clickable elements present
✅ UI components test completed
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="14.245">
<system-out>
<![CDATA[🛡️ Testing error handling and edge cases...
📡 /dashboard/nonexistent: 404
📡 /api/invalid-endpoint: 404
📡 /invalid-page: 404
✅ Error handling test completed
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="13.943">
<system-out>
<![CDATA[⚡ Testing performance and loading states...
📊 Page load time: 2483ms
📊 Found 0 loading elements
📊 Found 0 error elements
✅ Performance test completed
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="14.186">
<system-out>
<![CDATA[📱 Testing responsive design...
📊 Mobile viewport: Content present
📊 Tablet viewport: Content present
📊 Desktop viewport: Content present
✅ Responsive design test completed
]]>
</system-out>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="11.686">
<system-out>
<![CDATA[🌐 Testing browser compatibility...
📊 User Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.7258.5 Safari/537.36
📊 JavaScript: Working
📊 LocalStorage: Working
✅ Browser compatibility test completed
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="0" time="41.344" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="6.133">
<system-out>
<![CDATA[🧪 Starting simple bidirectional communication test...
✅ Page loaded successfully
✅ Page has content
📊 Found 6 buttons and 40 links
✅ Basic functionality test completed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="11.594">
<system-out>
<![CDATA[🔧 Testing widget functionality...
✅ Widget container found
📊 Found 5 interactive elements
✅ Widget functionality test completed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="9.451">
<system-out>
<![CDATA[📊 Testing dashboard access...
✅ Properly redirected to login (expected)
✅ Dashboard access test completed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="2.605">
<system-out>
<![CDATA[🔌 Testing API endpoints...
📡 Auth session status: 401
📡 Homepage status: 200
✅ API endpoints test completed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="4.927">
<system-out>
<![CDATA[📡 Monitoring realtime connections...
🔍 REALTIME: 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [Widget Realtime] 20:43:46 - 🚀 Starting enhanced real-time connection {channelName: org:b5e80170-004c-4e82-a88c-3e2166b169dd:conv:254e49b7-9c58-4beb-a6ef-c2757ddbc3d4, organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 254e49b7-9c58-4beb-a6ef-c2757ddbc3d4}
🔍 REALTIME: [Widget Event] widget_realtime_connect_success: {organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 254e49b7-9c58-4beb-a6ef-c2757ddbc3d4}
🔍 REALTIME: [Widget Realtime] 20:43:46 - 🔄 Disconnecting channel {state: joining, topic: realtime:org:b5e80170-004c-4e82-a88c-3e2166b169dd:conv:254e49b7-9c58-4beb-a6ef-c2757ddbc3d4}
🔍 REALTIME: WebSocket connection to 'wss://yvntokkncxbhapqjesti.supabase.co/realtime/v1/websocket?apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl2bnRva2tuY3hiaGFwcWplc3RpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0ODUxNTQsImV4cCI6MjA2MDA2MTE1NH0.iJ4C4AHk0bfBmISvbSekGIAXn7puFL0lGbBwqBd6XTs&eventsPerSecond=10&log_level=debug&vsn=1.0.0' failed: WebSocket is closed before the connection is established.
🔍 REALTIME: [Widget Realtime] 20:43:46 - 🚀 Starting enhanced real-time connection {channelName: org:b5e80170-004c-4e82-a88c-3e2166b169dd:conv:254e49b7-9c58-4beb-a6ef-c2757ddbc3d4, organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 254e49b7-9c58-4beb-a6ef-c2757ddbc3d4}
🔍 REALTIME: [Widget Event] widget_realtime_connect_success: {organizationId: b5e80170-004c-4e82-a88c-3e2166b169dd, conversationId: 254e49b7-9c58-4beb-a6ef-c2757ddbc3d4}
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
🔍 REALTIME: [UNKNOWN] 🔐 [Auth] No access token found - realtime may fail
📊 Captured 19 realtime logs
✅ Realtime monitoring completed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="6.634">
<system-out>
<![CDATA[🛡️ Testing error handling...
📄 Non-existent page result: http://localhost:3001/non-existent-page
📡 Invalid API status: 404
✅ Error handling test completed
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="3" failures="1" skipped="0" time="138.581" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="44.46">
<system-out>
<![CDATA[🧪 Starting simple bidirectional communication test...
✅ Page loaded successfully
📄 Page title: Campfire - Customer support that feels completely human
📝 Page has content: Yes
📊 Content length: 33659 characters
🔘 Interactive elements found:
   Buttons: 6
   Links: 40
   Inputs: 0
🖱️  Testing button interaction...
   First button text: ""
🔄 Simulating bidirectional communication...
📤 Client → Server: Sending test message
📥 Server → Client: Receiving response
⚡ Testing real-time events...
🔗 Testing connection stability...
✅ Connection stability test completed in 3334ms
📊 Measuring performance...
   Load time: 0ms
   DOM content loaded: 0.20000000298023224ms
   Total time: 1509.5999999940395ms
🎉 Simple bidirectional communication test completed successfully!
✅ All basic interactions verified
✅ Performance metrics collected
✅ Connection stability confirmed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="46.823">
<system-out>
<![CDATA[🔌 Testing WebSocket-like communication simulation...
📊 WebSocket simulation results:
   Success: true
   Events processed: 6
   Duration: 500ms
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="47.298">
<failure message="simple-bidirectional-test.spec.ts:199:7 should test bidirectional data flow" type="FAILURE">
<![CDATA[  [chromium] › simple-bidirectional-test.spec.ts:199:7 › Simple Bidirectional Communication › should test bidirectional data flow 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      201 |
      202 |     await page.goto('http://localhost:3001');
    > 203 |     await page.waitForLoadState('networkidle');
          |                ^
      204 |
      205 |     // Test bidirectional data flow
      206 |     const dataFlowTest = await page.evaluate(() => {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/simple-bidirectional-test.spec.ts:203:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/simple-bidirectional-test--13389-est-bidirectional-data-flow-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/simple-bidirectional-test--13389-est-bidirectional-data-flow-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/simple-bidirectional-test--13389-est-bidirectional-data-flow-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[🔄 Testing bidirectional data flow...

[[ATTACHMENT|simple-bidirectional-test--13389-est-bidirectional-data-flow-chromium/test-failed-1.png]]

[[ATTACHMENT|simple-bidirectional-test--13389-est-bidirectional-data-flow-chromium/video.webm]]

[[ATTACHMENT|simple-bidirectional-test--13389-est-bidirectional-data-flow-chromium/error-context.md]]
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="10" failures="3" skipped="0" time="282.609" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="47.602">
<failure message="a11y-compliance.spec.ts:9:7 should have proper ARIA labels" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/a11y-compliance.spec.ts:9:7 › Accessibility Compliance › should have proper ARIA labels 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      4 |   test.beforeEach(async ({ page }) => {
      5 |     await page.goto('/');
    > 6 |     await page.waitForLoadState('networkidle');
        |                ^
      7 |   });
      8 |
      9 |   test('should have proper ARIA labels', async ({ page }) => {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/a11y-compliance.spec.ts:6:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="47.543">
<failure message="a11y-compliance.spec.ts:27:7 should have proper heading hierarchy" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/a11y-compliance.spec.ts:27:7 › Accessibility Compliance › should have proper heading hierarchy 

    TimeoutError: page.waitForLoadState: Timeout 30000ms exceeded.

      4 |   test.beforeEach(async ({ page }) => {
      5 |     await page.goto('/');
    > 6 |     await page.waitForLoadState('networkidle');
        |                ^
      7 |   });
      8 |
      9 |   test('should have proper ARIA labels', async ({ page }) => {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/a11y-compliance.spec.ts:6:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="44.952">
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="44.855">
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="3.31">
<failure message="a11y-compliance.spec.ts:86:7 should have proper skip links" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/a11y-compliance.spec.ts:86:7 › Accessibility Compliance › should have proper skip links 

    Error: expect(received).toBeTruthy()

    Received: ""

      94 |         const link = skipLinks.nth(i);
      95 |         const text = await link.textContent();
    > 96 |         expect(text).toBeTruthy();
         |                      ^
      97 |       }
      98 |     }
      99 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/a11y-compliance.spec.ts:96:22

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-831fb-ould-have-proper-skip-links-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-831fb-ould-have-proper-skip-links-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-a11y-c-831fb-ould-have-proper-skip-links-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-a11y-c-831fb-ould-have-proper-skip-links-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-a11y-c-831fb-ould-have-proper-skip-links-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-a11y-c-831fb-ould-have-proper-skip-links-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="3.081">
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="29.366">
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="29.539">
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="3.882">
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="28.479">
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="9" failures="1" skipped="0" time="137.831" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="28.435">
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="18.6">
<failure message="accessibility.spec.ts:37:7 should have proper ARIA labels" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/accessibility.spec.ts:37:7 › Accessibility › should have proper ARIA labels 

    Error: expect(received).toBeTruthy()

    Received: ""

      48 |       const textContent = await button.textContent();
      49 |       const hasAccessibleName = ariaLabel || (textContent && textContent.trim().length > 0);
    > 50 |       expect(hasAccessibleName).toBeTruthy();
         |                                 ^
      51 |     }
      52 |     
      53 |     // Check links have accessible text
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/accessibility.spec.ts:50:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="28.793">
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="27.816">
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="9.488">
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="3.42">
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="1.93">
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="9.242">
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="10.107">
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="9" failures="7" skipped="2" time="272.707" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="33.81">
<failure message="dashboard-messages.spec.ts:18:7 should require authentication for GET messages" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:18:7 › Dashboard Messages API › should require authentication for GET messages 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="33.899">
<failure message="dashboard-messages.spec.ts:26:7 should require authentication for POST messages" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:26:7 › Dashboard Messages API › should require authentication for POST messages 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="34.188">
<failure message="dashboard-messages.spec.ts:39:7 should fetch messages for authenticated user" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:39:7 › Dashboard Messages API › should fetch messages for authenticated user 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="34.804">
<failure message="dashboard-messages.spec.ts:56:7 should create message for authenticated user" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:56:7 › Dashboard Messages API › should create message for authenticated user 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="31.19">
<failure message="dashboard-messages.spec.ts:81:7 should validate message content" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:81:7 › Dashboard Messages API › should validate message content 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="31.648">
<failure message="dashboard-messages.spec.ts:97:7 should validate conversation exists" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:97:7 › Dashboard Messages API › should validate conversation exists 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="31.062">
<failure message="dashboard-messages.spec.ts:106:7 should support pagination parameters" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:106:7 › Dashboard Messages API › should support pagination parameters 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="21.178">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="20.928">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="17" failures="3" skipped="14" time="79.371" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0.382">
<failure message="presence.spec.ts:5:9 should require authentication for presence updates" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:5:9 › Presence APIs › Authentication Required › should require authentication for presence updates 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      11 |       });
      12 |
    > 13 |       expect(response.status()).toBe(401);
         |                                 ^
      14 |       
      15 |       const error = await response.json();
      16 |       expect(error).toHaveProperty('error');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:13:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0.159">
<failure message="presence.spec.ts:20:9 should require authentication for presence retrieval" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:20:9 › Presence APIs › Authentication Required › should require authentication for presence retrieval 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      21 |       const response = await page.request.get('/api/presence');
      22 |
    > 23 |       expect(response.status()).toBe(401);
         |                                 ^
      24 |       
      25 |       const error = await response.json();
      26 |       expect(error).toHaveProperty('error');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:23:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0.263">
<failure message="presence.spec.ts:30:9 should require authentication for heartbeat" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:30:9 › Presence APIs › Authentication Required › should require authentication for heartbeat 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      36 |       });
      37 |
    > 38 |       expect(response.status()).toBe(401);
         |                                 ^
      39 |       
      40 |       const error = await response.json();
      41 |       expect(error).toHaveProperty('error');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:38:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="17.94">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="17.439">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="15.096">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="14.378">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="13.714">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Bidirectional Communication with Authentication Test › should test authenticated bidirectional communication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test widget with authentication" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test AI handover functionality" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test message sending and receiving" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication with Authentication Test › should test realtime connection stability" classname="bidirectional-communication-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication-corrected.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test basic functionality with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test login and dashboard access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test widget functionality" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test API endpoints" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test authenticated inbox access" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test error handling and database issues" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test realtime connection monitoring" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication Test (Corrected URLs) › should test AI handover with correct URLs" classname="bidirectional-communication-corrected.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="comprehensive-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Comprehensive Inbox Dashboard Test › should load inbox dashboard with all core components" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation list functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test chat header and customer information" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message list and conversation display" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test message composer functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test AI handover functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test customer sidebar functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test conversation management features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test bulk actions functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test advanced filters functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test keyboard shortcuts" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test file upload functionality" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test emoji picker and templates" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test real-time features and connections" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test performance and loading states" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test accessibility features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Inbox Dashboard Test › should test responsive design and mobile features" classname="comprehensive-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="robust-inbox-dashboard-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Robust Inbox Dashboard Test › should load inbox dashboard structure" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test authentication flow" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test page navigation and routing" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test API endpoints and data loading" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test real-time functionality" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test UI components and interactions" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test error handling and edge cases" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test performance and loading states" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test responsive design" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Robust Inbox Dashboard Test › should test browser compatibility" classname="robust-inbox-dashboard-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test-fixed.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Simple Bidirectional Communication Test (Fixed) › should load homepage and verify basic functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test widget functionality" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test dashboard access" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test API endpoints" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should monitor realtime connections" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication Test (Fixed) › should test error handling" classname="simple-bidirectional-test-fixed.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/performance-regression.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Performance Regression Tests › should not have render thrashing in widget" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have auth validation spam" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have realtime connection thrashing" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have 401 errors from widget refresh" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should not have preload warnings" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should have stable widget performance" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should handle message sending without performance issues" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance Regression Tests › should maintain connection status indicators" classname="tests/performance/performance-regression.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-accessibility.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UltimateWidget Accessibility › should be keyboard navigable" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper ARIA labels" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should support screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper color contrast" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle focus management properly" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should announce status changes to screen readers" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should be operable with voice control" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should handle reduced motion preferences" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Accessibility › should have proper error handling for accessibility" classname="tests/ultimate-widget-accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="UltimateWidget Bidirectional Communication › should establish real-time connection and send messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should display typing indicators bidirectionally" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle real-time message synchronization" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle connection errors gracefully" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should support advanced features" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should maintain conversation state across page reloads" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle multiple rapid messages" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Bidirectional Communication › should handle AI handover functionality" classname="tests/ultimate-widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ultimate-widget-performance.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="UltimateWidget Performance › should handle rapid message sending" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should maintain connection stability" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle concurrent users" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle large message content" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle memory usage under load" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle network latency gracefully" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UltimateWidget Performance › should handle rapid widget open/close cycles" classname="tests/ultimate-widget-performance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-basic.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Basic Functionality › should open widget and find input" classname="tests/widget-basic.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-simple.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple Test › should open widget and send message" classname="tests/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-02T20:40:52.858Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>