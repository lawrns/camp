<testsuites id="" name="" tests="2240" failures="36" skipped="2186" errors="0" time="83.70208">
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="6" skipped="0" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:81:7 should establish bidirectional message communication" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:81:7 › Bidirectional Communication E2E › should establish bidirectional message communication 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:142:7 should handle typing indicators bidirectionally" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:142:7 › Bidirectional Communication E2E › should handle typing indicators bidirectionally 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:194:7 should handle presence updates bidirectionally" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:194:7 › Bidirectional Communication E2E › should handle presence updates bidirectionally 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:231:7 should handle message delivery status" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:231:7 › Bidirectional Communication E2E › should handle message delivery status 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:269:7 should handle connection interruption and recovery" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:269:7 › Bidirectional Communication E2E › should handle connection interruption and recovery 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<failure message="bidirectional-communication.spec.ts:324:7 should handle concurrent messages from multiple users" type="FAILURE">
<![CDATA[  [chromium] › bidirectional-communication.spec.ts:324:7 › Bidirectional Communication E2E › should handle concurrent messages from multiple users 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |     // Load test metadata
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     // Create separate browser instances for agent and customer
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'customerBrowser')

      74 |
      75 |   test.afterAll(async () => {
    > 76 |     await testContext.customerBrowser?.close();
         |                       ^
      77 |     await testContext.agentContext?.close();
      78 |     await testContext.customerContext?.close();
      79 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/bidirectional-communication.spec.ts:76:23
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="5" failures="5" skipped="0" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<failure message="multi-user-scenarios.spec.ts:95:7 should handle multiple agents serving different customers" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:95:7 › Multi-User Scenarios E2E › should handle multiple agents serving different customers 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<failure message="multi-user-scenarios.spec.ts:190:7 should handle agent handoff scenarios" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:190:7 › Multi-User Scenarios E2E › should handle agent handoff scenarios 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<failure message="multi-user-scenarios.spec.ts:262:7 should handle AI to human handover" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:262:7 › Multi-User Scenarios E2E › should handle AI to human handover 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<failure message="multi-user-scenarios.spec.ts:335:7 should handle supervisor monitoring and intervention" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:335:7 › Multi-User Scenarios E2E › should handle supervisor monitoring and intervention 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<failure message="multi-user-scenarios.spec.ts:407:7 should handle concurrent message load" type="FAILURE">
<![CDATA[  [chromium] › multi-user-scenarios.spec.ts:407:7 › Multi-User Scenarios E2E › should handle concurrent message load 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      34 |   test.beforeAll(async ({ browser }) => {
      35 |     const testMetadata = JSON.parse(
    > 36 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      37 |     );
      38 |
      39 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:36:21

    TypeError: Cannot read properties of undefined (reading 'browsers')

      83 |   test.afterAll(async () => {
      84 |     // Close all browsers except the first one (managed by Playwright)
    > 85 |     for (let i = 1; i < testContext.browsers.length; i++) {
         |                                     ^
      86 |       await testContext.browsers[i].close();
      87 |     }
      88 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/multi-user-scenarios.spec.ts:85:37
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="4" failures="4" skipped="0" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<failure message="performance-load-testing.spec.ts:107:7 should handle high-volume message throughput" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:107:7 › Performance & Load Testing E2E › should handle high-volume message throughput 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<failure message="performance-load-testing.spec.ts:202:7 should maintain connection stability under load" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:202:7 › Performance & Load Testing E2E › should maintain connection stability under load 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<failure message="performance-load-testing.spec.ts:277:7 should monitor memory usage during extended operation" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:277:7 › Performance & Load Testing E2E › should monitor memory usage during extended operation 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<failure message="performance-load-testing.spec.ts:353:7 should handle concurrent typing indicators" type="FAILURE">
<![CDATA[  [chromium] › performance-load-testing.spec.ts:353:7 › Performance & Load Testing E2E › should handle concurrent typing indicators 

    Error: ENOENT: no such file or directory, open 'e2e/test-metadata.json'

      41 |   test.beforeAll(async ({ browser }) => {
      42 |     const testMetadata = JSON.parse(
    > 43 |       require('fs').readFileSync('e2e/test-metadata.json', 'utf-8')
         |                     ^
      44 |     );
      45 |
      46 |     testContext = {
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:43:21

    TypeError: Cannot read properties of undefined (reading 'metrics')

      72 |     // Generate performance report
      73 |     const report = {
    > 74 |       ...testContext.metrics,
         |                      ^
      75 |       summary: {
      76 |         avgMessageLatency: testContext.metrics.messageLatency.reduce((a, b) => a + b, 0) / testContext.metrics.messageLatency.length || 0,
      77 |         avgConnectionTime: testContext.metrics.connectionTime.reduce((a, b) => a + b, 0) / testContext.metrics.connectionTime.length || 0,
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/performance-load-testing.spec.ts:74:22
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="3" failures="0" skipped="0" time="8.969" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="3.348">
<system-out>
<![CDATA[🧪 Starting simple bidirectional communication test...
✅ Page loaded successfully
📄 Page title: Campfire - Customer Support Platform
📝 Page has content: Yes
📊 Content length: 26635 characters
🔘 Interactive elements found:
   Buttons: 3
   Links: 13
   Inputs: 0
🖱️  Testing button interaction...
   First button text: ""
🔄 Simulating bidirectional communication...
📤 Client → Server: Sending test message
📥 Server → Client: Receiving response
⚡ Testing real-time events...
🔗 Testing connection stability...
✅ Connection stability test completed in 542ms
📊 Measuring performance...
   Load time: 0ms
   DOM content loaded: 0ms
   Total time: 1000.4000000003725ms
🎉 Simple bidirectional communication test completed successfully!
✅ All basic interactions verified
✅ Performance metrics collected
✅ Connection stability confirmed
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="2.923">
<system-out>
<![CDATA[🔌 Testing WebSocket-like communication simulation...
📊 WebSocket simulation results:
   Success: true
   Events processed: 6
   Duration: 500ms
]]>
</system-out>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="2.698">
<system-out>
<![CDATA[🔄 Testing bidirectional data flow...
✅ Bidirectional data flow test completed
📈 Performance: 70.20ms average latency
🔄 Coverage: 2 directions, 3 types
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="10" failures="2" skipped="0" time="21.607" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.797">
<failure message="a11y-compliance.spec.ts:9:7 should have proper ARIA labels" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/a11y-compliance.spec.ts:9:7 › Accessibility Compliance › should have proper ARIA labels 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: "Open Next.js Dev Tools"

      21 |       // Element should have some form of accessible name
      22 |       const hasLabel = ariaLabel || ariaLabelledBy || (textContent && textContent.trim() !== '');
    > 23 |       expect(hasLabel).toBe(true);
         |                        ^
      24 |     }
      25 |   });
      26 |
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/a11y-compliance.spec.ts:23:24

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-a11y-c-599ce-uld-have-proper-ARIA-labels-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.832">
<failure message="a11y-compliance.spec.ts:27:7 should have proper heading hierarchy" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/a11y-compliance.spec.ts:27:7 › Accessibility Compliance › should have proper heading hierarchy 

    Error: expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 1
    Received:    2

      44 |         
      45 |         // Check that heading levels don't skip more than one level
    > 46 |         expect(level - previousLevel).toBeLessThanOrEqual(1);
         |                                       ^
      47 |         previousLevel = level;
      48 |       }
      49 |     }
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/a11y-compliance.spec.ts:46:39

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-a11y-c-ed414-ve-proper-heading-hierarchy-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.688">
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.304">
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="1.532">
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="1.577">
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.037">
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.014">
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="2.064">
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="1.762">
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="9" failures="2" skipped="0" time="15.317" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="1.832">
<failure message="accessibility.spec.ts:8:7 should have proper heading structure" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/accessibility.spec.ts:8:7 › Accessibility › should have proper heading structure 

    Error: expect(received).toBeLessThanOrEqual(expected)

    Expected: <= 1
    Received:    2

      30 |       
      31 |       // Check that heading levels don't skip more than one level
    > 32 |       expect(level - previousLevel).toBeLessThanOrEqual(1);
         |                                     ^
      33 |       previousLevel = level;
      34 |     }
      35 |   });
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/accessibility.spec.ts:32:37

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-access-b1978-ve-proper-heading-structure-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-access-b1978-ve-proper-heading-structure-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-access-b1978-ve-proper-heading-structure-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-access-b1978-ve-proper-heading-structure-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-access-b1978-ve-proper-heading-structure-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-access-b1978-ve-proper-heading-structure-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="1.961">
<failure message="accessibility.spec.ts:37:7 should have proper ARIA labels" type="FAILURE">
<![CDATA[  [chromium] › tests/accessibility/accessibility.spec.ts:37:7 › Accessibility › should have proper ARIA labels 

    Error: expect(received).toBeTruthy()

    Received: ""

      48 |       const textContent = await button.textContent();
      49 |       const hasAccessibleName = ariaLabel || (textContent && textContent.trim().length > 0);
    > 50 |       expect(hasAccessibleName).toBeTruthy();
         |                                 ^
      51 |     }
      52 |     
      53 |     // Check links have accessible text
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/accessibility/accessibility.spec.ts:50:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/video.webm]]

[[ATTACHMENT|tests-accessibility-access-422e9-uld-have-proper-ARIA-labels-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="2.103">
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="2.066">
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="1.69">
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="1.755">
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0.601">
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="1.806">
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="1.503">
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="9" failures="9" skipped="0" time="278.776" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="31.049">
<failure message="dashboard-messages.spec.ts:18:7 should require authentication for GET messages" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:18:7 › Dashboard Messages API › should require authentication for GET messages 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-075c7-entication-for-GET-messages-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="31.165">
<failure message="dashboard-messages.spec.ts:26:7 should require authentication for POST messages" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:26:7 › Dashboard Messages API › should require authentication for POST messages 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-8315c-ntication-for-POST-messages-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="31.377">
<failure message="dashboard-messages.spec.ts:39:7 should fetch messages for authenticated user" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:39:7 › Dashboard Messages API › should fetch messages for authenticated user 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-0cac3-ages-for-authenticated-user-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="31.394">
<failure message="dashboard-messages.spec.ts:56:7 should create message for authenticated user" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:56:7 › Dashboard Messages API › should create message for authenticated user 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-18886-sage-for-authenticated-user-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="31.176">
<failure message="dashboard-messages.spec.ts:81:7 should validate message content" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:81:7 › Dashboard Messages API › should validate message content 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-f21ee-ld-validate-message-content-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="30.851">
<failure message="dashboard-messages.spec.ts:97:7 should validate conversation exists" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:97:7 › Dashboard Messages API › should validate conversation exists 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-411b2-alidate-conversation-exists-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="30.277">
<failure message="dashboard-messages.spec.ts:106:7 should support pagination parameters" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:106:7 › Dashboard Messages API › should support pagination parameters 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-37e14-pport-pagination-parameters-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="30.724">
<failure message="dashboard-messages.spec.ts:122:7 should broadcast real-time events on message creation" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:122:7 › Dashboard Messages API › should broadcast real-time events on message creation 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-17dcf--events-on-message-creation-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-17dcf--events-on-message-creation-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-17dcf--events-on-message-creation-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-17dcf--events-on-message-creation-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-17dcf--events-on-message-creation-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-17dcf--events-on-message-creation-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="30.763">
<failure message="dashboard-messages.spec.ts:145:7 should handle organization scoping" type="FAILURE">
<![CDATA[  [chromium] › tests/api/dashboard-messages.spec.ts:145:7 › Dashboard Messages API › should handle organization scoping 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


       8 |     // Login as test user to get authentication
       9 |     await page.goto('/auth/login');
    > 10 |     await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                ^
      11 |     await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      12 |     await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      13 |     
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/dashboard-messages.spec.ts:10:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-22f66-handle-organization-scoping-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-dashboard-messag-22f66-handle-organization-scoping-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-dashboard-messag-22f66-handle-organization-scoping-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-dashboard-messag-22f66-handle-organization-scoping-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-dashboard-messag-22f66-handle-organization-scoping-chromium/video.webm]]

[[ATTACHMENT|tests-api-dashboard-messag-22f66-handle-organization-scoping-chromium/error-context.md]]
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="17" failures="8" skipped="9" time="223.906" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0.291">
<failure message="presence.spec.ts:5:9 should require authentication for presence updates" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:5:9 › Presence APIs › Authentication Required › should require authentication for presence updates 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      11 |       });
      12 |
    > 13 |       expect(response.status()).toBe(401);
         |                                 ^
      14 |       
      15 |       const error = await response.json();
      16 |       expect(error).toHaveProperty('error');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:13:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-2d047-cation-for-presence-updates-chromium/video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0.25">
<failure message="presence.spec.ts:20:9 should require authentication for presence retrieval" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:20:9 › Presence APIs › Authentication Required › should require authentication for presence retrieval 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      21 |       const response = await page.request.get('/api/presence');
      22 |
    > 23 |       expect(response.status()).toBe(401);
         |                                 ^
      24 |       
      25 |       const error = await response.json();
      26 |       expect(error).toHaveProperty('error');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:23:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-d6427-tion-for-presence-retrieval-chromium/video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0.303">
<failure message="presence.spec.ts:30:9 should require authentication for heartbeat" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:30:9 › Presence APIs › Authentication Required › should require authentication for heartbeat 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 401
    Received: 500

      36 |       });
      37 |
    > 38 |       expect(response.status()).toBe(401);
         |                                 ^
      39 |       
      40 |       const error = await response.json();
      41 |       expect(error).toHaveProperty('error');
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:38:33

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-6a185-uthentication-for-heartbeat-chromium/video.webm]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="30.701">
<failure message="presence.spec.ts:58:9 should update user presence status" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:58:9 › Presence APIs › Authenticated Presence Operations › should update user presence status 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


      48 |       // Login as test user to get authentication
      49 |       await page.goto('/auth/login');
    > 50 |       await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                  ^
      51 |       await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      52 |       await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      53 |       
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:50:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-b67bb-update-user-presence-status-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-b67bb-update-user-presence-status-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-presence-Presenc-b67bb-update-user-presence-status-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-b67bb-update-user-presence-status-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-b67bb-update-user-presence-status-chromium/video.webm]]

[[ATTACHMENT|tests-api-presence-Presenc-b67bb-update-user-presence-status-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="30.632">
<failure message="presence.spec.ts:80:9 should validate presence status values" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:80:9 › Presence APIs › Authenticated Presence Operations › should validate presence status values 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


      48 |       // Login as test user to get authentication
      49 |       await page.goto('/auth/login');
    > 50 |       await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                  ^
      51 |       await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      52 |       await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      53 |       
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:50:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-d99b0-date-presence-status-values-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-d99b0-date-presence-status-values-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-presence-Presenc-d99b0-date-presence-status-values-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-d99b0-date-presence-status-values-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-d99b0-date-presence-status-values-chromium/video.webm]]

[[ATTACHMENT|tests-api-presence-Presenc-d99b0-date-presence-status-values-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="30.431">
<failure message="presence.spec.ts:94:9 should retrieve organization presence data" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:94:9 › Presence APIs › Authenticated Presence Operations › should retrieve organization presence data 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


      48 |       // Login as test user to get authentication
      49 |       await page.goto('/auth/login');
    > 50 |       await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                  ^
      51 |       await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      52 |       await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      53 |       
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:50:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-65caf--organization-presence-data-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-65caf--organization-presence-data-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-presence-Presenc-65caf--organization-presence-data-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-65caf--organization-presence-data-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-65caf--organization-presence-data-chromium/video.webm]]

[[ATTACHMENT|tests-api-presence-Presenc-65caf--organization-presence-data-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="30.331">
<failure message="presence.spec.ts:114:9 should support presence filtering options" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:114:9 › Presence APIs › Authenticated Presence Operations › should support presence filtering options 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


      48 |       // Login as test user to get authentication
      49 |       await page.goto('/auth/login');
    > 50 |       await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                  ^
      51 |       await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      52 |       await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      53 |       
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:50:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-a1292--presence-filtering-options-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-a1292--presence-filtering-options-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-presence-Presenc-a1292--presence-filtering-options-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-a1292--presence-filtering-options-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-a1292--presence-filtering-options-chromium/video.webm]]

[[ATTACHMENT|tests-api-presence-Presenc-a1292--presence-filtering-options-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="30.46">
<failure message="presence.spec.ts:126:9 should set user offline on logout" type="FAILURE">
<![CDATA[  [chromium] › tests/api/presence.spec.ts:126:9 › Presence APIs › Authenticated Presence Operations › should set user offline on logout 

    TimeoutError: page.fill: Timeout 30000ms exceeded.
    Call log:
      - waiting for locator('[data-testid="email-input"], #email, input[type="email"]')


      48 |       // Login as test user to get authentication
      49 |       await page.goto('/auth/login');
    > 50 |       await page.fill('[data-testid="email-input"], #email, input[type="email"]', 'jam@jam.com');
         |                  ^
      51 |       await page.fill('[data-testid="password-input"], #password, input[type="password"]', 'password123');
      52 |       await page.click('[data-testid="login-button"], button[type="submit"], button:has-text("Sign in")');
      53 |       
        at /Users/lukatenbosch/Downloads/campfire-v2/e2e/tests/api/presence.spec.ts:50:18

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-10c92--set-user-offline-on-logout-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    ../test-results/tests-api-presence-Presenc-10c92--set-user-offline-on-logout-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: ../test-results/tests-api-presence-Presenc-10c92--set-user-offline-on-logout-chromium/error-context.md
]]>
</failure>
<system-out>
<![CDATA[
[[ATTACHMENT|tests-api-presence-Presenc-10c92--set-user-offline-on-logout-chromium/test-failed-1.png]]

[[ATTACHMENT|tests-api-presence-Presenc-10c92--set-user-offline-on-logout-chromium/video.webm]]

[[ATTACHMENT|tests-api-presence-Presenc-10c92--set-user-offline-on-logout-chromium/error-context.md]]
]]>
</system-out>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="11.759">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="10.776">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="10.039">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="9.974">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="9.859">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="9.185">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="8.915">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="chromium" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="firefox" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="webkit" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Mobile Safari" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Microsoft Edge" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Bidirectional Communication E2E › should establish bidirectional message communication" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle typing indicators bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle presence updates bidirectionally" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle message delivery status" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle connection interruption and recovery" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Bidirectional Communication E2E › should handle concurrent messages from multiple users" classname="bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="multi-user-scenarios.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Multi-User Scenarios E2E › should handle multiple agents serving different customers" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle agent handoff scenarios" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle AI to human handover" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle supervisor monitoring and intervention" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Multi-User Scenarios E2E › should handle concurrent message load" classname="multi-user-scenarios.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="performance-load-testing.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Performance &amp; Load Testing E2E › should handle high-volume message throughput" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should maintain connection stability under load" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should monitor memory usage during extended operation" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance &amp; Load Testing E2E › should handle concurrent typing indicators" classname="performance-load-testing.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="simple-bidirectional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Bidirectional Communication › should demonstrate basic page loading and interaction" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test WebSocket-like communication simulation" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Bidirectional Communication › should test bidirectional data flow" classname="simple-bidirectional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/a11y-compliance.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Accessibility Compliance › should have proper ARIA labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper heading hierarchy" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper form labels" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper alt text for images" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper skip links" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should handle screen reader announcements" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper focus indicators" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper color contrast" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper keyboard navigation" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility Compliance › should have proper semantic HTML" classname="tests/accessibility/a11y-compliance.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/accessibility/accessibility.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Accessibility › should have proper heading structure" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper ARIA labels" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper color contrast" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should support keyboard navigation" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper focus management" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper semantic HTML" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper language attributes" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should handle reduced motion preferences" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Accessibility › should have proper error handling" classname="tests/accessibility/accessibility.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/dashboard-messages.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Dashboard Messages API › should require authentication for GET messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should require authentication for POST messages" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should fetch messages for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should create message for authenticated user" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate message content" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should validate conversation exists" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should support pagination parameters" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should broadcast real-time events on message creation" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Dashboard Messages API › should handle organization scoping" classname="tests/api/dashboard-messages.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/presence.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="17" failures="0" skipped="17" time="0" errors="0">
<testcase name="Presence APIs › Authentication Required › should require authentication for presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for presence retrieval" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authentication Required › should require authentication for heartbeat" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should update user presence status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should validate presence status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should retrieve organization presence data" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should support presence filtering options" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Authenticated Presence Operations › should set user offline on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should send heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should validate heartbeat status values" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should retrieve current heartbeat status" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should create presence record if none exists" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Heartbeat System › should handle rapid heartbeat updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast presence updates" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast heartbeat updates selectively" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Real-time Broadcasting › should broadcast offline status on logout" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Presence APIs › Presence Status Transitions › should support all valid status transitions" classname="tests/api/presence.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/trpc-endpoints.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="tRPC Endpoints › should verify all tRPC endpoints are accessible" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC error handling" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC batch requests work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="tRPC Endpoints › should verify tRPC POST mutations work" classname="tests/api/trpc-endpoints.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/api/typing-indicators.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Typing Indicator APIs › Widget Typing API › should allow typing indicators without authentication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should stop typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should fetch typing indicators" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Widget Typing API › should validate isTyping parameter type" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should require authentication for dashboard typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to start typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should allow authenticated agents to stop typing" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should fetch typing indicators for authenticated agents" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate conversation access" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Dashboard Typing API › should validate required parameters" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Typing Indicator APIs › Real-time Broadcasting › should broadcast typing events for bidirectional communication" classname="tests/api/typing-indicators.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/api-authentication-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="API Authentication Debug › should debug API authentication issues" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="API Authentication Debug › should test authentication flow step by step" classname="tests/auth/api-authentication-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Authentication Flow › should display auth test page correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should show user status when not authenticated" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle sign in button click" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should handle test sign in" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Authentication Flow › should display error messages correctly" classname="tests/auth/auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/authenticated-api-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authenticated API Communication › should test authenticated tRPC calls with manual session setup" classname="tests/auth/authenticated-api-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/basic-auth.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Basic Authentication Tests › should load login page" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should login successfully with jam@jam.com" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should access protected routes after login" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should maintain session across page navigation" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle logout" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should redirect to login when accessing protected routes without auth" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should show error for invalid credentials" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should validate form inputs" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Authentication Tests › should handle form validation for email format" classname="tests/auth/basic-auth.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Bidirectional Communication › should authenticate and test complete bidirectional communication" classname="tests/auth/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-auth-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Complete Authentication Flow › should authenticate and make successful tRPC calls" classname="tests/auth/complete-auth-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/complete-e2e-flow.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Complete E2E Flow › should complete full authentication and API flow" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should handle authentication errors gracefully" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Complete E2E Flow › should test tRPC endpoints directly" classname="tests/auth/complete-e2e-flow.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/comprehensive-authenticated-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Comprehensive Authenticated Testing › should login and test all authenticated areas" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test real-time features in inbox" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test widget functionality" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test navigation and session persistence" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test error handling and edge cases" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Authenticated Testing › should test all authenticated API endpoints" classname="tests/auth/comprehensive-authenticated-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/debug-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Login Page › should debug login page structure" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Login Page › should test manual login with debug info" classname="tests/auth/debug-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Login Page › should load login page successfully" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should display login form with proper styling" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Login Page › should handle form submission" classname="tests/auth/login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/page-load.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Page Load Tests › should load login page" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load homepage" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Page Load Tests › should load dashboard after login" classname="tests/auth/page-load.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth/simple-login.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="3" failures="0" skipped="3" time="0" errors="0">
<testcase name="Simple Login Test › should login with jam@jam.com" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access inbox after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Simple Login Test › should access widget after login" classname="tests/auth/simple-login.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/auth-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Authentication Debug › should debug authentication flow and identify 401 errors" classname="tests/auth-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should access homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard and login" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should send message from homepage widget" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should access dashboard conversation" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should handle widget and dashboard together" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should verify API endpoints" classname="tests/basic-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/basic-widget-dashboard.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Basic Widget-Dashboard Communication › should test widget and dashboard separately" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Basic Widget-Dashboard Communication › should test error handling" classname="tests/basic-widget-dashboard.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive/widget-dashboard-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Widget-Dashboard Communication › should validate complete communication flow and AI handover" classname="tests/comprehensive/widget-dashboard-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/comprehensive-feature-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Comprehensive Feature Testing › should test complete authentication and dashboard access" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test inbox functionality and conversation management" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test widget and bidirectional communication" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test API endpoints for all features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test real-time communication infrastructure" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test conversation management features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test knowledge base and team features" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive Feature Testing › should test advanced features and integrations" classname="tests/comprehensive-feature-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/conversations/realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Real-time Communication › should handle real-time connection" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should send and receive messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should show typing indicators" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle long messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle special characters" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle emoji messages" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should handle connection errors gracefully" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Real-time Communication › should reconnect automatically" classname="tests/conversations/realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/debug-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Debug Widget › should debug widget message sending" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Debug Widget › should check widget API endpoints" classname="tests/debug-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/fresh-auth-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Fresh Authentication Test › should test widget-dashboard communication with fresh auth" classname="tests/fresh-auth-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/homepage.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="10" failures="0" skipped="10" time="0" errors="0">
<testcase name="Homepage › should have proper navigation" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display hero section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should display feature cards section" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have call-to-action buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should be responsive" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper heading hierarchy" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have working links" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should load without console errors" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have proper meta tags" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage › should have accessible CTA buttons" classname="tests/homepage/homepage.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/homepage/navigation.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Homepage Navigation › should load homepage successfully" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to login page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup page from navigation" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to signup from hero section CTA" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should navigate to features section" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Homepage Navigation › should have proper page structure" classname="tests/homepage/navigation.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/ai-handover.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="12" failures="0" skipped="12" time="0" errors="0">
<testcase name="Inbox AI Handover Features › should initiate AI handover from agent to AI" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover from AI to agent" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should show AI handover history and context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation context" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with file attachments" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation tags" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with customer information" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation history" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation priority" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation status" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation assignment" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox AI Handover Features › should handle AI handover with conversation metrics" classname="tests/inbox/ai-handover.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/bidirectional-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Bidirectional Communication › should display inbox page" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should show inbox interface elements" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox navigation" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should maintain session in inbox" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Bidirectional Communication › should handle inbox page refresh" classname="tests/inbox/bidirectional-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/inbox-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="19" failures="0" skipped="19" time="0" errors="0">
<testcase name="Inbox Features and Functionalities › should display conversation list with proper information" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should filter conversations by status" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should search conversations" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should sort conversations by different criteria" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation selection and navigation" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation assignment" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation priority changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation status changes" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation tags and labels" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle customer information display" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation history and context" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation metrics and analytics" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation notes and internal comments" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation templates and canned responses" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation export and sharing" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation bulk actions" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation keyboard shortcuts" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation accessibility features" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Features and Functionalities › should handle conversation performance and loading states" classname="tests/inbox/inbox-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/inbox/realtime-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Inbox Real-time Features › should load inbox page with real-time capabilities" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain real-time connection state" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page navigation with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should handle page refresh with real-time" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Inbox Real-time Features › should maintain session across real-time operations" classname="tests/inbox/realtime-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/read-receipts.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Read Receipt System › should track read receipts for widget messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should track read receipts for dashboard messages" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt status correctly" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt API endpoints" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should mark messages as read via API" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should show read receipt summary" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle real-time read receipt updates" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Read Receipt System › should handle read receipt errors gracefully" classname="tests/integration/read-receipts.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/integration/widget-dashboard-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="Widget-Dashboard Integration › should display widget container with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should open widget panel when button is clicked" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should display message input with proper test selectors" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from widget to dashboard" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should send message from dashboard to widget" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should show typing indicators bidirectionally" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle real-time message delivery" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should maintain conversation context across widget sessions" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Dashboard Integration › should handle error states gracefully" classname="tests/integration/widget-dashboard-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/minimal-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Minimal Widget Test › should test minimal widget functionality" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Minimal Widget Test › should test widget state management" classname="tests/minimal-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/performance/web-vitals.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Performance - Core Web Vitals › should meet LCP threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet FID threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should meet CLS threshold" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should load widget quickly" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should handle rapid interactions" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Performance - Core Web Vitals › should maintain performance under load" classname="tests/performance/web-vitals.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime/message-broadcasting.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Message Broadcasting › Widget Message Broadcasting › should broadcast widget messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Widget Message Broadcasting › should handle broadcasting errors gracefully" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast dashboard messages to real-time channels" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Dashboard Message Broadcasting › should broadcast to multiple channels for comprehensive updates" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support widget to dashboard message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should support dashboard to widget message flow" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Message Broadcasting › Bidirectional Broadcasting › should handle rapid bidirectional messaging" classname="tests/realtime/message-broadcasting.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/realtime-sync-comprehensive.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Comprehensive Real-time Synchronization › should verify complete widget-dashboard real-time message flow" classname="tests/realtime-sync-comprehensive.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/setup/test-data-verification.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="Test Data Setup Verification › should have standardized test credentials" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test organization data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have test conversation data available" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support all test user roles" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have consistent test data across API endpoints" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should support test data isolation" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should have proper error handling for missing data" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Test Data Setup Verification › should maintain data consistency across browser sessions" classname="tests/setup/test-data-verification.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/simple-widget.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple Widget Test › should render widget demo page" classname="tests/simple-widget.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/technical-core-features.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Technical Core Features › should verify authentication system works" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify API infrastructure is working" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify dashboard functionality" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify real-time infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify widget infrastructure" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Technical Core Features › should verify database connectivity" classname="tests/technical-core-features.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/comprehensive-ui-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Comprehensive UI/UX Testing › should test login page UI components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test authenticated pages after login" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test navigation and layout components" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test form components and interactions" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test accessibility features" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should test error handling and loading states" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Comprehensive UI/UX Testing › should provide comprehensive UI status report" classname="tests/ui/comprehensive-ui-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui/simple-ui-status.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Simple UI Status Report › should provide comprehensive UI/UX status report" classname="tests/ui/simple-ui-status.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/ui-functional-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="9" failures="0" skipped="9" time="0" errors="0">
<testcase name="UI Functional Testing › should test real conversation assignment functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real AI handover functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real ticket conversion functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation tagging functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation priority functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation status functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real bidirectional communication between widget and agent" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation notes functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="UI Functional Testing › should test real conversation history and export functionality" classname="tests/ui-functional-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/visual/design-system.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="Visual Regression - Design System › should render design system tokens correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should display correct color tokens" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain consistent spacing" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should render button variants correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should maintain responsive design" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Visual Regression - Design System › should handle dark mode correctly" classname="tests/visual/design-system.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-bidirectional.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="14" failures="0" skipped="14" time="0" errors="0">
<testcase name="Widget Bidirectional Communication › should establish Supabase Realtime connection in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should send and receive messages in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should show typing indicators in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message delivery status in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle message read receipts in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle file attachments in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle emoji reactions in widget" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget state persistence" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget responsive design" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget accessibility" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget error states" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget notifications" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget customization" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Bidirectional Communication › should handle widget analytics and tracking" classname="tests/widget/widget-bidirectional.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="2" failures="0" skipped="2" time="0" errors="0">
<testcase name="Widget Debug › should check page loads and widget structure" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Debug › should check widget renders correctly" classname="tests/widget/widget-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-integration.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget Integration › should display widget button on homepage" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should open chat panel when widget button is clicked" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should close chat panel when widget button is clicked again" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should show message count badge when there are unread messages" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should have proper accessibility attributes" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should handle keyboard navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Integration › should maintain state across page navigation" classname="tests/widget/widget-integration.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget/widget-simple.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Simple › should keep button visible after clicking" classname="tests/widget/widget-simple.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-alignment.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Conversation Alignment › should use the same conversation ID in widget and dashboard" classname="tests/widget-conversation-alignment.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-conversation-debug.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget Conversation Debug › should verify widget conversation ID alignment" classname="tests/widget-conversation-debug.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-core-functionality.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="4" failures="0" skipped="4" time="0" errors="0">
<testcase name="Core Widget Functionality › should open widget and verify basic structure" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify widget real-time connection" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should test dashboard login and basic access" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Core Widget Functionality › should verify API endpoints are accessible" classname="tests/widget-core-functionality.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-final.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Final Widget-Dashboard Integration › should complete widget to dashboard message flow" classname="tests/widget-dashboard-final.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-realtime.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Real-time Communication › should enable bidirectional communication via Supabase Realtime" classname="tests/widget-dashboard-realtime.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="tests/widget-dashboard-sync.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="Widget-Dashboard Message Synchronization › should sync messages from widget to dashboard inbox" classname="tests/widget-dashboard-sync.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-agent-communication.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="Widget-Agent Communication E2E › should initialize widget and establish connection" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle customer conversation initiation" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle agent assignment and response" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle emoji and rich text messages" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle widget customization" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle mobile responsiveness" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget-Agent Communication E2E › should handle conversation closure" classname="widget-agent-communication.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="widget-functionality-test.spec.ts" timestamp="2025-08-01T18:35:58.179Z" hostname="Google Chrome" tests="5" failures="0" skipped="5" time="0" errors="0">
<testcase name="Widget Functionality &amp; Bidirectional Communication › should load widget and test basic functionality" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test Supabase connection and real-time capabilities" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should simulate bidirectional message flow" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test connection reliability and error handling" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="Widget Functionality &amp; Bidirectional Communication › should test performance under load" classname="widget-functionality-test.spec.ts" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
</testsuites>