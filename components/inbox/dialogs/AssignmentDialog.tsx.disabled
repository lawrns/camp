"use client";

import React, { useState } from "react";
import { CheckCircleIcon, ClockIcon, MessageCircleIcon, UserIcon, UsersIcon } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { cn } from "@/lib/utils";

interface AssignmentDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  conversation?: {
    id: string;
    customerName: string;
    customerEmail: string;
    subject?: string;
    currentAssignee?: string;
  };
  onAssignmentComplete?: (assignment: any) => void;
}

interface Operator {
  id: string;
  name: string;
  email: string;
  avatar?: string;
  availability: "available" | "busy" | "away" | "offline";
  workload: "light" | "medium" | "heavy";
  responseTime: string;
  activeConversations: number;
  skills: string[];
  workingHours: string;
}

interface Team {
  id: string;
  name: string;
  members: string[];
  availability: "available" | "partial" | "busy";
  specialization: string;
}

const OPERATORS: Operator[] = [
  {
    id: "john_doe",
    name: "John Doe",
    email: "john@company.com",
    avatar: "/avatars/john.jpg",
    availability: "available",
    workload: "medium",
    responseTime: "< 5 min",
    activeConversations: 3,
    skills: ["Technical Support", "Billing", "Integrations"],
    workingHours: "9 AM - 6 PM EST",
  },
  {
    id: "jane_smith",
    name: "Jane Smith",
    email: "jane@company.com",
    avatar: "/avatars/jane.jpg",
    availability: "busy",
    workload: "heavy",
    responseTime: "15-30 min",
    activeConversations: 8,
    skills: ["Product Support", "Feature Requests", "Account Management"],
    workingHours: "8 AM - 5 PM PST",
  },
  {
    id: "mike_wilson",
    name: "Mike Wilson",
    email: "mike@company.com",
    availability: "available",
    workload: "light",
    responseTime: "< 2 min",
    activeConversations: 1,
    skills: ["Technical Support", "Bug Reports", "API Help"],
    workingHours: "10 AM - 7 PM EST",
  },
  {
    id: "sarah_chen",
    name: "Sarah Chen",
    email: "sarah@company.com",
    availability: "away",
    workload: "light",
    responseTime: "1-2 hours",
    activeConversations: 2,
    skills: ["Billing", "Payments", "Account Issues"],
    workingHours: "7 AM - 4 PM PST",
  },
];

const TEAMS: Team[] = [
  {
    id: "support_l1",
    name: "Level 1 Support",
    members: ["john_doe", "mike_wilson"],
    availability: "available",
    specialization: "General inquiries and basic technical support",
  },
  {
    id: "support_l2",
    name: "Level 2 Support",
    members: ["jane_smith"],
    availability: "busy",
    specialization: "Complex technical issues and escalations",
  },
  {
    id: "billing_team",
    name: "Billing Team",
    members: ["sarah_chen", "john_doe"],
    availability: "partial",
    specialization: "Billing, payments, and account management",
  },
];

type AssignmentType = "operator" | "team" | "auto";

export function AssignmentDialog({ open, onOpenChange, conversation, onAssignmentComplete }: AssignmentDialogProps) {
  const { toast } = useToast();
  const [assignmentType, setAssignmentType] = useState<AssignmentType>("operator");
  const [selectedOperator, setSelectedOperator] = useState<string>("");
  const [selectedTeam, setSelectedTeam] = useState<string>("");
  const [assignmentNotes, setAssignmentNotes] = useState("");
  const [notifyCustomer, setNotifyCustomer] = useState(true);
  const [highPriority, setHighPriority] = useState(false);
  const [isAssigning, setIsAssigning] = useState(false);

  const handleAssignment = async () => {
    setIsAssigning(true);

    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1500));

      const assignment = {
        conversationId: conversation?.id,
        type: assignmentType,
        assignedTo:
          assignmentType === "operator" ? selectedOperator : assignmentType === "team" ? selectedTeam : "auto",
        notes: assignmentNotes,
        notifyCustomer,
        highPriority,
        assignedAt: new Date().toISOString(),
        assignedBy: "current_user", // Would come from auth context
      };

      toast({
        title: "Assignment Successful",
        description: `Conversation has been ${assignmentType === "auto" ? "auto-assigned" : `assigned to ${assignmentType}`}.`,
      });

      onAssignmentComplete?.(assignment);
      onOpenChange(false);
    } catch (error) {
      toast({
        title: "Assignment Failed",
        description: "There was an issue with the assignment. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsAssigning(false);
    }
  };

  const getAvailabilityColor = (availability: string) => {
    switch (availability) {
      case "available":
        return "bg-green-500";
      case "busy":
        return "bg-yellow-500";
      case "away":
        return "bg-orange-500";
      case "offline":
        return "bg-gray-500";
      default:
        return "bg-gray-500";
    }
  };

  const getWorkloadColor = (workload: string) => {
    switch (workload) {
      case "light":
        return "text-green-600";
      case "medium":
        return "text-yellow-600";
      case "heavy":
        return "text-red-600";
      default:
        return "text-gray-600";
    }
  };

  const canAssign = () => {
    switch (assignmentType) {
      case "operator":
        return selectedOperator !== "";
      case "team":
        return selectedTeam !== "";
      case "auto":
        return true;
      default:
        return false;
    }
  };

  const renderOperatorSelection = () => (
    <div className="space-y-4">
      <div className="grid gap-3">
        {OPERATORS.map((operator) => (
          <div
            key={operator.id}
            className={cn(
              "p-4 border rounded-lg cursor-pointer transition-all",
              selectedOperator === operator.id ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-gray-300"
            )}
            onClick={() => setSelectedOperator(operator.id)}
          >
            <div className="flex items-start gap-3">
              <Avatar className="w-10 h-10">
                <AvatarImage src={operator.avatar} />
                <AvatarFallback>
                  {operator.name
                    .split(" ")
                    .map((n) => n[0])
                    .join("")}
                </AvatarFallback>
              </Avatar>

              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-medium">{operator.name}</h4>
                  <div className={cn("w-2 h-2 rounded-full", getAvailabilityColor(operator.availability))} />
                  <Badge variant="outline" className="text-xs">
                    {operator.availability}
                  </Badge>
                </div>

                <p className="text-sm text-gray-600 mb-2">{operator.email}</p>

                <div className="grid grid-cols-2 gap-4 text-xs text-gray-500">
                  <div className="flex items-center gap-1">
                    <ClockIcon className="w-3 h-3" />
                    Response: {operator.responseTime}
                  </div>
                  <div className="flex items-center gap-1">
                    <MessageCircleIcon className="w-3 h-3" />
                    Active: {operator.activeConversations}
                  </div>
                  <div className={cn("font-medium", getWorkloadColor(operator.workload))}>
                    Workload: {operator.workload}
                  </div>
                  <div>Hours: {operator.workingHours}</div>
                </div>

                <div className="mt-2">
                  <div className="flex flex-wrap gap-1">
                    {operator.skills.slice(0, 3).map((skill) => (
                      <Badge key={skill} variant="secondary" className="text-xs">
                        {skill}
                      </Badge>
                    ))}
                    {operator.skills.length > 3 && (
                      <Badge variant="secondary" className="text-xs">
                        +{operator.skills.length - 3} more
                      </Badge>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
  };

  const renderTeamSelection = () => {
    if (loadingMembers) {
      return (
        <div className="space-y-4">
          <div className="grid gap-3">
            {[1, 2].map((i) => (
              <div key={i} className="p-4 border rounded-lg">
                <div className="flex items-start gap-3">
                  <div className="w-10 h-10 bg-gray-200 rounded-lg animate-pulse" />
                  <div className="flex-1 space-y-2">
                    <Skeleton className="h-5 w-40" />
                    <SkeletonText lines={2} />
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      );
    }

    if (teams.length === 0) {
      return (
        <div className="text-center py-8 text-gray-500">
          No teams configured for this organization.
        </div>
      );
    }

    return (
    <div className="space-y-4">
      <div className="grid gap-3">
        {TEAMS.map((team) => (
          <div
            key={team.id}
            className={cn(
              "p-4 border rounded-lg cursor-pointer transition-all",
              selectedTeam === team.id ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-gray-300"
            )}
            onClick={() => setSelectedTeam(team.id)}
          >
            <div className="flex items-start gap-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <UsersIcon className="w-5 h-5 text-blue-600" />
              </div>

              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <h4 className="font-medium">{team.name}</h4>
                  <Badge variant="outline" className="text-xs">
                    {team.availability}
                  </Badge>
                </div>

                <p className="text-sm text-gray-600 mb-2">{team.specialization}</p>

                <div className="text-xs text-gray-500">
                  <div className="flex items-center gap-1 mb-1">
                    <UserIcon className="w-3 h-3" />
                    {team.members.length} members
                  </div>

                  <div className="flex flex-wrap gap-1">
                    {team.members.map((memberId) => {
                      const member = OPERATORS.find((op) => op.id === memberId);
                      return member ? (
                        <span key={memberId} className="text-xs">
                          {member.name}
                          {team.members.indexOf(memberId) < team.members.length - 1 && ","}
                        </span>
                      ) : null;
                    })}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
  };

  const renderAutoAssignment = () => {
    // Find best available operator
    const availableOperators = OPERATORS.filter(op => op.availability === "available");
    const recommendedOperator = availableOperators.sort((a, b) => {
      // Sort by workload (light > medium > heavy)
      const workloadScore = { light: 0, medium: 1, heavy: 2 };
      return (workloadScore[a.workload] || 2) - (workloadScore[b.workload] || 2);
    })[0];

    return (
    <div className="space-y-4">
      <div className="bg-blue-50 p-4 rounded-lg">
        <h4 className="font-medium text-blue-900 mb-2">Smart Auto-Assignment</h4>
        <p className="text-sm text-blue-800 mb-3">
          Our intelligent system will automatically assign this conversation based on:
        </p>
        <ul className="text-sm text-blue-800 space-y-1">
          <li>• Operator availability and current workload</li>
          <li>• Skills matching the conversation topic</li>
          <li>• Response time performance</li>
          <li>• Customer priority level</li>
        </ul>
      </div>

      <div className="bg-gray-50 p-4 rounded-lg">
        <h4 className="font-medium mb-2">Recommended Assignment</h4>
        <div className="flex items-center gap-3">
          <Avatar className="w-8 h-8">
            <AvatarFallback>MW</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium text-sm">Mike Wilson</div>
            <div className="text-xs text-gray-600">Best match: Available, light workload, relevant skills</div>
          </div>
        </div>
      </div>
    </div>
    );
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Assign Conversation</DialogTitle>
          <DialogDescription>
            Choose how to assign this conversation for the best customer experience.
          </DialogDescription>
        </DialogHeader>

        {conversation && (
          <div className="bg-gray-50 p-3 rounded-lg mb-4">
            <div className="text-sm">
              <span className="font-medium">Customer:</span> {conversation.customerName}
              <span className="mx-2">•</span>
              <span className="font-medium">Email:</span> {conversation.customerEmail}
            </div>
            {conversation.subject && (
              <div className="text-sm mt-1">
                <span className="font-medium">Subject:</span> {conversation.subject}
              </div>
            )}
          </div>
        )}

        {/* Assignment Type Selection */}
        <div className="space-y-4">
          <Label>Assignment Type</Label>
          <div className="grid grid-cols-3 gap-2">
            <Button
              variant={assignmentType === "operator" ? "default" : "outline"}
              onClick={() => setAssignmentType("operator")}
              className="flex items-center gap-2"
            >
              <UserIcon className="w-4 h-4" />
              Operator
            </Button>
            <Button
              variant={assignmentType === "team" ? "default" : "outline"}
              onClick={() => setAssignmentType("team")}
              className="flex items-center gap-2"
            >
              <UsersIcon className="w-4 h-4" />
              Team
            </Button>
            <Button
              variant={assignmentType === "auto" ? "default" : "outline"}
              onClick={() => setAssignmentType("auto")}
              className="flex items-center gap-2"
            >
              <CheckCircleIcon className="w-4 h-4" />
              Auto
            </Button>
          </div>
        </div>

        {/* Assignment Selection */}
        <div className="space-y-4">
          {assignmentType === "operator" && renderOperatorSelection()}
          {assignmentType === "team" && renderTeamSelection()}
          {assignmentType === "auto" && renderAutoAssignment()}
        </div>

        {/* Assignment Notes */}
        <div className="space-y-2">
          <Label htmlFor="notes">Assignment Notes (Optional)</Label>
          <Textarea
            id="notes"
            value={assignmentNotes}
            onChange={(e) => setAssignmentNotes(e.target.value)}
            placeholder="Add any context or special instructions for the assignee..."
            rows={3}
          />
        </div>

        {/* Options */}
        <div className="space-y-3">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="notifyCustomer"
              checked={notifyCustomer}
              onCheckedChange={(checked) => setNotifyCustomer(!!checked)}
            />
            <Label htmlFor="notifyCustomer" className="text-sm">
              Notify customer about the assignment
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="highPriority"
              checked={highPriority}
              onCheckedChange={(checked) => setHighPriority(!!checked)}
            />
            <Label htmlFor="highPriority" className="text-sm">
              Mark as high priority
            </Label>
          </div>
        </div>

        {/* Actions */}
        <div className="flex justify-end gap-2 pt-4 border-t">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleAssignment} disabled={isAssigning || !canAssign()}>
            {isAssigning ? "Assigning..." : "Assign Conversation"}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
