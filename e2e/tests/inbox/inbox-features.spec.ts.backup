import { test, expect } from '@playwright/test';
import { testUsers } from '../../fixtures/test-data';

test.describe('Inbox Features and Functionalities', () => {
  test.beforeEach(async ({ page }) => {
    // Login as admin user
    await page.goto('/login');
    await page.waitForLoadState('networkidle');
    
    // Wait for email input to be available
    await page.waitForSelector('#email', { timeout: 10000 });
    await page.fill('#email', testUsers.admin.email);
    await page.fill('#password', testUsers.admin.password);
    await page.click('button[type="submit"]');
    
    // Wait for login to complete and navigate to inbox
    await page.waitForURL(/\/dashboard/, { timeout: 30000 });
    await page.goto('/dashboard/inbox');
    await page.waitForLoadState('networkidle');
  });

  test('should display conversation list with proper information', async ({ page }) => {
    // Wait for the inbox page to load - look for the main greeting heading
    await page.waitForSelector('h1:has-text("Good")', { timeout: 10000 });
    
    // Verify the main page header is visible
    await expect(page.locator('h1:has-text("Good")')).toBeVisible();
    
    // Wait for the conversation list container to load
    await page.waitForSelector('[data-testid="conversation-list-container"]', { timeout: 15000 });
    
    // Verify conversation list container is visible
    await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
    
    // Check if we're in loading state
    const loadingSkeletons = page.locator('.space-y-2.spacing-4');
    if (await loadingSkeletons.isVisible()) {
      // Wait for loading to complete
      await page.waitForSelector('.conversation-list-virtualized, [data-testid="conversation-empty-title"]', { timeout: 20000 });
    }
    
    // Check if there are conversations or empty state
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    
    if (await conversationList.isVisible()) {
      // Verify conversation list is visible
      await expect(conversationList).toBeVisible();
      
      // Check if there are any conversation items (they're virtualized, so we check for the container)
      await expect(page.locator('.conversation-list-virtualized')).toBeVisible();
    } else if (await emptyState.isVisible()) {
      // Verify empty state is visible
      await expect(emptyState).toBeVisible();
      await expect(page.locator('[data-testid="conversation-empty-message"]')).toBeVisible();
    } else {
      // If neither is visible, the test should fail
      throw new Error('Neither conversation list nor empty state is visible');
    }
  });

  test('should filter conversations by status', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Check if we're in empty state or have conversations
    const emptyState = page.locator('[data-testid="conversation-list-empty-state"]');
    const filterButtons = page.locator('button:has-text("All")');
    
    if (await emptyState.isVisible()) {
      // If empty state, just verify the container is visible
      await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
      await expect(emptyState).toBeVisible();
    } else {
      // If we have conversations, test the filters
      await page.click('button:has-text("All")');
      await page.click('button:has-text("Unread")');
      
      // Verify filter is applied
      await expect(page.locator('button:has-text("Unread")')).toHaveClass(/bg-\[var\(--ds-color-primary-500\)\]/);
      
      // Clear filter by clicking "All" again
      await page.click('button:has-text("All")');
    }
  });

  test('should search conversations', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Look for search input in the header
    const searchInput = page.locator('input[placeholder*="Search"], input[placeholder*="search"]');
    await searchInput.click();
    
    // Type search query
    await searchInput.fill('test customer');
    await searchInput.press('Enter');
    
    // Verify search is applied (either shows results or empty state)
    await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
    
    // Clear search
    await searchInput.clear();
    await searchInput.press('Enter');
  });

  test('should sort conversations by different criteria', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Verify conversation list container is visible
    await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
    
    // Check if there are conversations or empty state
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    
    if (await conversationList.isVisible()) {
      // Verify conversation list is visible
      await expect(conversationList).toBeVisible();
    } else if (await emptyState.isVisible()) {
      // Verify empty state is visible
      await expect(emptyState).toBeVisible();
    }
  });

  test('should handle conversation selection and navigation', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Verify conversation list container is visible
    await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
    
    // Check if there are conversations to select
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    
    if (await conversationList.isVisible()) {
      // Try to select first conversation if available
      const conversationItems = page.locator('.conversation-list-virtualized > div');
      const itemCount = await conversationItems.count();
      
      if (itemCount > 0) {
        await conversationItems.first().click();
        // Verify chat area is visible
        await expect(page.locator('.bg-\\[var\\(--ds-color-background\\)\\]')).toBeVisible();
      }
    } else if (await emptyState.isVisible()) {
      // Verify empty state is visible
      await expect(emptyState).toBeVisible();
    }
  });

  test('should handle conversation assignment', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Verify conversation list container is visible
    await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
    
    // Check if there are conversations to assign
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    
    if (await conversationList.isVisible()) {
      // Try to select first conversation if available
      const conversationItems = page.locator('.conversation-list-virtualized > div');
      const itemCount = await conversationItems.count();
      
      if (itemCount > 0) {
        await conversationItems.first().click();
        // Verify chat area is visible
        await expect(page.locator('.bg-\\[var\\(--ds-color-background\\)\\]')).toBeVisible();
      }
    } else if (await emptyState.isVisible()) {
      // Verify empty state is visible
      await expect(emptyState).toBeVisible();
    }
  });

  test('should handle conversation priority changes', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Check if we're in empty state or have conversations
    const emptyState = page.locator('[data-testid="conversation-list-empty-state"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    
    if (await emptyState.isVisible()) {
      // If empty state, just verify the container is visible
      await expect(page.locator('[data-testid="conversation-list-container"]')).toBeVisible();
      await expect(emptyState).toBeVisible();
    } else {
      // If we have conversations, test priority changes
      const conversationItems = page.locator('.conversation-list-virtualized > div');
      const itemCount = await conversationItems.count();
      
      if (itemCount > 0) {
        await conversationItems.first().click();
        // Verify chat area is visible
        await expect(page.locator('.bg-\\[var\\(--ds-color-background\\)\\]')).toBeVisible();
      }
    }
  });

  test('should handle conversation status changes', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click status button
    await page.click('[data-testid="status-button"]');
    
    // Select "In Progress" status
    await page.click('[data-testid="status-in-progress"]');
    
    // Verify status is updated
    await expect(page.locator('[data-testid="status-indicator"]')).toContainText('in-progress');
  });

  test('should handle conversation tags and labels', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click add tag button
    await page.click('[data-testid="add-tag-button"]');
    
    // Select a tag
    await page.click('[data-testid="tag-technical"]');
    
    // Verify tag is added
    await expect(page.locator('[data-testid="conversation-tag"]')).toContainText('technical');
    
    // Remove tag
    await page.click('[data-testid="remove-tag-button"]');
    await expect(page.locator('[data-testid="conversation-tag"]')).not.toBeVisible();
  });

  test('should handle customer information display', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click customer info button
    await page.click('[data-testid="customer-info-button"]');
    
    // Verify customer information panel
    await expect(page.locator('[data-testid="customer-info-panel"]')).toBeVisible();
    
    // Verify customer details are displayed
    await expect(page.locator('[data-testid="customer-name"]')).toBeVisible();
    await expect(page.locator('[data-testid="customer-email"]')).toBeVisible();
    await expect(page.locator('[data-testid="customer-phone"]')).toBeVisible();
  });

  test('should handle conversation history and context', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click conversation history button
    await page.click('[data-testid="history-button"]');
    
    // Verify history panel
    await expect(page.locator('[data-testid="history-panel"]')).toBeVisible();
    
    // Verify conversation context is displayed
    await expect(page.locator('[data-testid="conversation-context"]')).toBeVisible();
  });

  test('should handle conversation metrics and analytics', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click metrics button
    await page.click('[data-testid="metrics-button"]');
    
    // Verify metrics panel
    await expect(page.locator('[data-testid="metrics-panel"]')).toBeVisible();
    
    // Verify metrics are displayed
    await expect(page.locator('[data-testid="response-time"]')).toBeVisible();
    await expect(page.locator('[data-testid="resolution-time"]')).toBeVisible();
    await expect(page.locator('[data-testid="satisfaction-score"]')).toBeVisible();
  });

  test('should handle conversation notes and internal comments', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click notes button
    await page.click('[data-testid="notes-button"]');
    
    // Add internal note
    const noteInput = page.locator('[data-testid="note-input"]');
    await noteInput.fill('Internal note: Customer needs follow-up');
    await noteInput.press('Enter');
    
    // Verify note is added
    await expect(page.locator('[data-testid="internal-note"]')).toContainText('Customer needs follow-up');
  });

  test('should handle conversation templates and canned responses', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click templates button
    await page.click('[data-testid="templates-button"]');
    
    // Select a template
    await page.click('[data-testid="template-greeting"]');
    
    // Verify template is inserted
    const messageInput = page.locator('[data-testid="message-input"]');
    await expect(messageInput).toHaveValue('Hello! How can I help you today?');
  });

  test('should handle conversation export and sharing', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    
    await page.waitForSelector('[data-testid="message-list"]');
    
    // Click export button
    await page.click('[data-testid="export-button"]');
    
    // Verify export modal
    await expect(page.locator('[data-testid="export-modal"]')).toBeVisible();
    
    // Select export format
    await page.click('[data-testid="export-pdf"]');
    
    // Confirm export
    await page.click('[data-testid="confirm-export"]');
    
    // Verify export starts
    await expect(page.locator('[data-testid="export-progress"]')).toBeVisible();
  });

  test('should handle conversation bulk actions', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Select multiple conversations
    const checkboxes = page.locator('[data-testid="conversation-checkbox"]');
    await checkboxes.first().check();
    await checkboxes.nth(1).check();
    
    // Verify bulk actions toolbar appears
    await expect(page.locator('[data-testid="bulk-actions-toolbar"]')).toBeVisible();
    
    // Perform bulk assignment
    await page.click('[data-testid="bulk-assign"]');
    await page.click('[data-testid="agent-john"]');
    await page.click('[data-testid="confirm-bulk-assignment"]');
    
    // Verify bulk action is completed
    await expect(page.locator('[data-testid="bulk-action-success"]')).toBeVisible();
  });

  test('should handle conversation keyboard shortcuts', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Use keyboard shortcut to search
    await page.keyboard.press('Control+f');
    await expect(page.locator('[data-testid="conversation-search"]')).toBeFocused();
    
    // Use keyboard shortcut to refresh
    await page.keyboard.press('F5');
    await expect(page.locator('[data-testid="conversation-list"]')).toBeVisible();
    
    // Use keyboard shortcut to mark as read
    const conversationList = page.locator('.conversation-list-virtualized');
    const emptyState = page.locator('[data-testid="conversation-empty-title"]');
    await firstConversation.click();
    await page.keyboard.press('r');
    await expect(page.locator('[data-testid="read-indicator"]')).toBeVisible();
  });

  test('should handle conversation accessibility features', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Verify ARIA labels are present
    await expect(page.locator('[data-testid="conversation-list"]')).toHaveAttribute('aria-label');
    
    // Verify keyboard navigation works
    await page.keyboard.press('Tab');
    await expect(page.locator('[data-testid="conversation-item"]').first()).toBeFocused();
    
    // Verify screen reader announcements
    await expect(page.locator('[data-testid="sr-announcement"]')).toBeVisible();
  });

  test('should handle conversation performance and loading states', async ({ page }) => {
    await page.waitForSelector('[data-testid="conversation-list-container"]');
    
    // Verify loading states
    await expect(page.locator('[data-testid="conversation-list"]')).toBeVisible();
    
    // Verify skeleton loading is not visible after load
    await expect(page.locator('[data-testid="skeleton-loader"]')).not.toBeVisible();
    
    // Verify performance metrics
    await expect(page.locator('[data-testid="performance-metrics"]')).toBeVisible();
  });
}); 