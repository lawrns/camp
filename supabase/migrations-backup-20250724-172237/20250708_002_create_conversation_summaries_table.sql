-- Create conversation_summaries table for AI-generated conversation summaries
CREATE TABLE IF NOT EXISTS public.conversation_summaries (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    conversation_id UUID NOT NULL REFERENCES public.conversations(id) ON DELETE CASCADE,
    organization_id UUID NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    
    -- Summary content
    summary TEXT NOT NULL,
    key_points TEXT[] DEFAULT '{}',
    sentiment TEXT CHECK (sentiment IN ('positive', 'negative', 'neutral', 'mixed')),
    category TEXT,
    
    -- Summary metadata
    summary_type TEXT NOT NULL DEFAULT 'auto' CHECK (summary_type IN ('auto', 'manual', 'ai_generated')),
    confidence_score FLOAT CHECK (confidence_score >= 0.0 AND confidence_score <= 1.0),
    word_count INTEGER,
    
    -- Generated by
    generated_by_user_id UUID REFERENCES public.profiles(user_id) ON DELETE SET NULL,
    generated_by_ai BOOLEAN DEFAULT true,
    ai_model TEXT,
    
    -- Status and lifecycle
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'outdated', 'archived')),
    version INTEGER DEFAULT 1,
    parent_summary_id UUID REFERENCES public.conversation_summaries(id) ON DELETE SET NULL,
    
    -- Time range this summary covers
    summary_start_time TIMESTAMP WITH TIME ZONE,
    summary_end_time TIMESTAMP WITH TIME ZONE,
    message_count INTEGER DEFAULT 0,
    
    -- Metadata
    metadata JSONB DEFAULT '{}',
    tags TEXT[] DEFAULT '{}',
    
    -- Timestamps
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX idx_conversation_summaries_conversation_id ON public.conversation_summaries(conversation_id);
CREATE INDEX idx_conversation_summaries_organization_id ON public.conversation_summaries(organization_id);
CREATE INDEX idx_conversation_summaries_status ON public.conversation_summaries(status);
CREATE INDEX idx_conversation_summaries_summary_type ON public.conversation_summaries(summary_type);
CREATE INDEX idx_conversation_summaries_sentiment ON public.conversation_summaries(sentiment);
CREATE INDEX idx_conversation_summaries_created_at ON public.conversation_summaries(created_at DESC);
CREATE INDEX idx_conversation_summaries_confidence_score ON public.conversation_summaries(confidence_score DESC);

-- Unique constraint to prevent duplicate active summaries
CREATE UNIQUE INDEX idx_conversation_summaries_unique_active ON public.conversation_summaries(conversation_id, status)
    WHERE status = 'active';

-- Enable RLS
ALTER TABLE public.conversation_summaries ENABLE ROW LEVEL SECURITY;

-- Create RLS policies
CREATE POLICY "Users can view conversation summaries in their organization" ON public.conversation_summaries
    FOR SELECT USING (
        organization_id IN (
            SELECT organization_id FROM public.organization_members 
            WHERE user_id = auth.uid() AND status = 'active'
        )
    );

CREATE POLICY "Agents can create conversation summaries" ON public.conversation_summaries
    FOR INSERT WITH CHECK (
        organization_id IN (
            SELECT organization_id FROM public.organization_members 
            WHERE user_id = auth.uid() AND status = 'active' 
            AND role IN ('admin', 'agent')
        )
    );

CREATE POLICY "Agents can update conversation summaries" ON public.conversation_summaries
    FOR UPDATE USING (
        organization_id IN (
            SELECT organization_id FROM public.organization_members 
            WHERE user_id = auth.uid() AND status = 'active' 
            AND role IN ('admin', 'agent')
        )
    );

-- Create trigger for updated_at
CREATE TRIGGER update_conversation_summaries_updated_at BEFORE UPDATE ON public.conversation_summaries
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Grant permissions
GRANT SELECT, INSERT, UPDATE ON public.conversation_summaries TO authenticated;
GRANT SELECT ON public.conversation_summaries TO anon;