-- Fix widget conversation creation issues
-- Ensure conversations table has all required columns for widget API

-- Ensure conversations table exists with proper structure
CREATE TABLE IF NOT EXISTS conversations (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Add all required columns for widget functionality
ALTER TABLE conversations 
ADD COLUMN IF NOT EXISTS organization_id UUID REFERENCES organizations(id),
ADD COLUMN IF NOT EXISTS mailbox_id INTEGER REFERENCES mailboxes(id),
ADD COLUMN IF NOT EXISTS initiator_id TEXT,
ADD COLUMN IF NOT EXISTS initiator_type TEXT DEFAULT 'visitor',
ADD COLUMN IF NOT EXISTS channel TEXT DEFAULT 'widget',
ADD COLUMN IF NOT EXISTS priority TEXT DEFAULT 'normal',
ADD COLUMN IF NOT EXISTS visitor_id TEXT,
ADD COLUMN IF NOT EXISTS customer_email TEXT,
ADD COLUMN IF NOT EXISTS last_message_at TIMESTAMP WITH TIME ZONE,
ADD COLUMN IF NOT EXISTS tags TEXT[] DEFAULT '{}',
ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'open',
ADD COLUMN IF NOT EXISTS subject TEXT,
ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}';

-- Ensure messages table exists and has required columns
CREATE TABLE IF NOT EXISTS messages (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

ALTER TABLE messages
ADD COLUMN IF NOT EXISTS conversation_id BIGINT REFERENCES conversations(id) ON DELETE CASCADE,
ADD COLUMN IF NOT EXISTS organization_id UUID REFERENCES organizations(id),
ADD COLUMN IF NOT EXISTS sender_id TEXT,
ADD COLUMN IF NOT EXISTS sender_type TEXT DEFAULT 'human',
ADD COLUMN IF NOT EXISTS content TEXT,
ADD COLUMN IF NOT EXISTS message_type TEXT DEFAULT 'text',
ADD COLUMN IF NOT EXISTS is_deleted BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS is_private BOOLEAN DEFAULT false,
ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}';

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_conversations_org_id ON conversations(organization_id);
CREATE INDEX IF NOT EXISTS idx_conversations_visitor_id ON conversations(visitor_id);
CREATE INDEX IF NOT EXISTS idx_conversations_channel ON conversations(channel);
CREATE INDEX IF NOT EXISTS idx_conversations_status ON conversations(status);
CREATE INDEX IF NOT EXISTS idx_messages_conversation_id ON messages(conversation_id);
CREATE INDEX IF NOT EXISTS idx_messages_org_id ON messages(organization_id);

-- Enable RLS
ALTER TABLE conversations ENABLE ROW LEVEL SECURITY;
ALTER TABLE messages ENABLE ROW LEVEL SECURITY;

-- Add RLS policies for widget access
-- Allow service role to manage all conversations
DROP POLICY IF EXISTS "Service role can manage all conversations" ON conversations;
CREATE POLICY "Service role can manage all conversations"
ON conversations
FOR ALL
USING (auth.jwt()->>'role' = 'service_role');

-- Allow service role to manage all messages
DROP POLICY IF EXISTS "Service role can manage all messages" ON messages;
CREATE POLICY "Service role can manage all messages"
ON messages
FOR ALL
USING (auth.jwt()->>'role' = 'service_role');

-- Allow authenticated users to read conversations in their organization
DROP POLICY IF EXISTS "Users can read org conversations" ON conversations;
CREATE POLICY "Users can read org conversations"
ON conversations
FOR SELECT
USING (
    auth.uid() IN (
        SELECT user_id FROM profiles 
        WHERE organization_id = conversations.organization_id
    )
);

-- Allow authenticated users to read messages in their organization
DROP POLICY IF EXISTS "Users can read org messages" ON messages;
CREATE POLICY "Users can read org messages"
ON messages
FOR SELECT
USING (
    auth.uid() IN (
        SELECT user_id FROM profiles 
        WHERE organization_id = messages.organization_id
    )
);
