import { describe, test, expect, beforeEach, afterEach } from '@jest/globals';
import { supabase } from '@/lib/supabase/consolidated-exports';

/**
 * RAG Pipeline Validation Tests
 * 
 * Tests the complete knowledge base â†’ RAG pipeline:
 * - Knowledge document ingestion
 * - Vector embedding generation
 * - Similarity search accuracy
 * - Response generation with citations
 */

describe('RAG Pipeline Integration Tests', () => {
  const TEST_ORG_ID = 'b5e80170-004c-4e82-a88c-3e2166b169dd';
  let testDocumentId: string;
  let testChunkIds: string[] = [];

  beforeEach(async () => {
    // Clean up any existing test data
    await cleanupTestData();
  });

  afterEach(async () => {
    // Clean up test data
    await cleanupTestData();
  });

  async function cleanupTestData() {
    if (testChunkIds.length > 0) {
      await supabase.admin()
        .from('knowledge_chunks')
        .delete()
        .in('id', testChunkIds);
    }

    if (testDocumentId) {
      await supabase.admin()
        .from('knowledge_documents')
        .delete()
        .eq('id', testDocumentId);
    }
  }

  test('Knowledge Document Ingestion and Chunking', async () => {
    // Step 1: Create test knowledge document
    const testDocument = {
      organization_id: TEST_ORG_ID,
      title: 'Password Reset Guide',
      content: `
        How to Reset Your Password
        
        If you've forgotten your password, follow these steps:
        
        1. Go to the login page
        2. Click "Forgot Password" link
        3. Enter your email address
        4. Check your email for reset instructions
        5. Click the reset link in the email
        6. Create a new password
        
        Password Requirements:
        - At least 8 characters long
        - Must contain uppercase and lowercase letters
        - Must include at least one number
        - Must include at least one special character
        
        If you continue to have issues, contact our support team.
      `,
      content_type: 'text/markdown',
      category: 'account_management',
      tags: ['password', 'reset', 'account', 'security'],
      is_public: true,
      isActive: true,
      metadata: {
        source: 'test_suite',
        priority: 'high'
      }
    };

    // Insert document
    const { data: document, error: docError } = await supabase.admin()
      .from('knowledge_documents')
      .insert(testDocument)
      .select()
      .single();

    expect(docError).toBeNull();
    expect(document).toBeTruthy();
    expect(document.id).toBeTruthy();
    testDocumentId = document.id;

    // Step 2: Simulate chunking process (normally done by background job)
    const chunks = [
      {
        organization_id: TEST_ORG_ID,
        document_id: testDocumentId,
        chunk_index: 0,
        content: 'How to Reset Your Password. If you\'ve forgotten your password, follow these steps: Go to the login page, Click "Forgot Password" link, Enter your email address',
        metadata: { section: 'introduction', word_count: 25 }
      },
      {
        organization_id: TEST_ORG_ID,
        document_id: testDocumentId,
        chunk_index: 1,
        content: 'Password Requirements: At least 8 characters long, Must contain uppercase and lowercase letters, Must include at least one number, Must include at least one special character',
        metadata: { section: 'requirements', word_count: 28 }
      },
      {
        organization_id: TEST_ORG_ID,
        document_id: testDocumentId,
        chunk_index: 2,
        content: 'If you continue to have issues, contact our support team.',
        metadata: { section: 'support', word_count: 10 }
      }
    ];

    // Insert chunks (embeddings would be generated by OpenAI in real implementation)
    const { data: insertedChunks, error: chunkError } = await supabase.admin()
      .from('knowledge_chunks')
      .insert(chunks)
      .select();

    expect(chunkError).toBeNull();
    expect(insertedChunks).toHaveLength(3);
    testChunkIds = insertedChunks.map(chunk => chunk.id);

    // Step 3: Verify document and chunks are properly linked
    const { data: documentWithChunks, error: linkError } = await supabase.admin()
      .from('knowledge_documents')
      .select(`
        *,
        knowledge_chunks(*)
      `)
      .eq('id', testDocumentId)
      .single();

    expect(linkError).toBeNull();
    expect(documentWithChunks.knowledge_chunks).toHaveLength(3);
  });

  test('Vector Similarity Search', async () => {
    // First create test document and chunks
    await createTestKnowledgeBase();

    // Step 1: Test similarity search for password reset query
    const searchQuery = 'how to reset password';
    
    // In a real implementation, this would use vector similarity search
    // For testing, we'll simulate with text search
    const { data: relevantChunks, error: searchError } = await supabase.admin()
      .from('knowledge_chunks')
      .select('*')
      .eq('organization_id', TEST_ORG_ID)
      .textSearch('content', searchQuery);

    expect(searchError).toBeNull();
    expect(relevantChunks.length).toBeGreaterThan(0);

    // Step 2: Verify most relevant chunk is returned first
    const topChunk = relevantChunks[0];
    expect(topChunk.content.toLowerCase()).toContain('password');
    expect(topChunk.content.toLowerCase()).toContain('reset');

    // Step 3: Test search with different query
    const requirementsQuery = 'password requirements';
    const { data: requirementChunks, error: reqError } = await supabase.admin()
      .from('knowledge_chunks')
      .select('*')
      .eq('organization_id', TEST_ORG_ID)
      .textSearch('content', requirementsQuery);

    expect(reqError).toBeNull();
    expect(requirementChunks.length).toBeGreaterThan(0);
    
    const topRequirementChunk = requirementChunks[0];
    expect(topRequirementChunk.content.toLowerCase()).toContain('requirements');
  });

  test('AI Response Generation with Citations', async () => {
    // Setup test knowledge base
    await createTestKnowledgeBase();

    // Step 1: Simulate AI query processing
    const customerQuery = 'I forgot my password, how do I reset it?';
    
    // Step 2: Retrieve relevant knowledge chunks
    const { data: relevantChunks, error: searchError } = await supabase.admin()
      .from('knowledge_chunks')
      .select(`
        *,
        knowledge_documents(title, category)
      `)
      .eq('organization_id', TEST_ORG_ID)
      .textSearch('content', 'password reset');

    expect(searchError).toBeNull();
    expect(relevantChunks.length).toBeGreaterThan(0);

    // Step 3: Simulate AI response generation
    const context = relevantChunks.map(chunk => chunk.content).join('\n\n');
    const mockAiResponse = {
      content: `To reset your password, please follow these steps:

1. Go to the login page
2. Click the "Forgot Password" link
3. Enter your email address
4. Check your email for reset instructions
5. Click the reset link in the email
6. Create a new password

Your new password must meet these requirements:
- At least 8 characters long
- Must contain uppercase and lowercase letters
- Must include at least one number
- Must include at least one special character

If you continue to have issues, please contact our support team.`,
      confidence_score: 0.95,
      sources: relevantChunks.map(chunk => ({
        document_id: chunk.document_id,
        document_title: chunk.knowledge_documents.title,
        chunk_id: chunk.id,
        relevance_score: 0.9
      }))
    };

    // Step 4: Validate response quality
    expect(mockAiResponse.confidence_score).toBeGreaterThan(0.8);
    expect(mockAiResponse.content).toContain('reset');
    expect(mockAiResponse.content).toContain('password');
    expect(mockAiResponse.sources.length).toBeGreaterThan(0);

    // Step 5: Verify citations are accurate
    const firstSource = mockAiResponse.sources[0];
    expect(firstSource.document_title).toBe('Password Reset Guide');
    expect(firstSource.relevance_score).toBeGreaterThan(0.7);
  });

  test('Knowledge Base Update and Invalidation', async () => {
    // Step 1: Create initial knowledge document
    await createTestKnowledgeBase();

    // Step 2: Update document content
    const updatedContent = `
      Updated Password Reset Guide
      
      New simplified process:
      1. Visit our password reset page
      2. Enter your email
      3. Check your email and click the link
      4. Set your new password
      
      New password requirements:
      - Minimum 12 characters
      - Must include special characters
    `;

    const { data: updatedDoc, error: updateError } = await supabase.admin()
      .from('knowledge_documents')
      .update({
        content: updatedContent,
        updated_at: new Date().toISOString()
      })
      .eq('id', testDocumentId)
      .select()
      .single();

    expect(updateError).toBeNull();
    expect(updatedDoc.content).toContain('12 characters');

    // Step 3: Verify old chunks are marked for re-processing
    // In a real system, this would trigger re-chunking and re-embedding
    const { data: chunks, error: chunkError } = await supabase.admin()
      .from('knowledge_chunks')
      .select('*')
      .eq('document_id', testDocumentId);

    expect(chunkError).toBeNull();
    expect(chunks.length).toBeGreaterThan(0);

    // Step 4: Test that updated content is retrievable
    const { data: searchResults, error: searchError } = await supabase.admin()
      .from('knowledge_documents')
      .select('*')
      .eq('id', testDocumentId)
      .single();

    expect(searchError).toBeNull();
    expect(searchResults.content).toContain('12 characters');
  });

  async function createTestKnowledgeBase() {
    const testDocument = {
      organization_id: TEST_ORG_ID,
      title: 'Password Reset Guide',
      content: 'Password reset instructions and requirements...',
      content_type: 'text/markdown',
      category: 'account_management',
      tags: ['password', 'reset'],
      is_public: true,
      isActive: true
    };

    const { data: document, error: docError } = await supabase.admin()
      .from('knowledge_documents')
      .insert(testDocument)
      .select()
      .single();

    if (docError) throw docError;
    testDocumentId = document.id;

    const chunks = [
      {
        organization_id: TEST_ORG_ID,
        document_id: testDocumentId,
        chunk_index: 0,
        content: 'How to reset your password: Go to login page, click forgot password, enter email',
        metadata: { section: 'steps' }
      }
    ];

    const { data: insertedChunks, error: chunkError } = await supabase.admin()
      .from('knowledge_chunks')
      .insert(chunks)
      .select();

    if (chunkError) throw chunkError;
    testChunkIds = insertedChunks.map(chunk => chunk.id);
  }
});
