'use client';

import { ReactNode, Component, ErrorInfo } from 'react';
import { UnifiedAuthProvider } from '@/lib/core/auth';
import { ThemeProvider } from '@/components/ThemeProvider';
import { QueryProvider } from '@/lib/cache/QueryProvider';
// Temporarily commented out to fix webpack module loading error
// // Temporarily commented out to fix webpack module loading error
// @// import { ToastProvider } from '@/components/ui/toast-provider';

// Simple error boundary that actually catches errors
class SimpleErrorBoundary extends Component<
  { children: ReactNode },
  { hasError: boolean; error: Error | null }
> {
  constructor(props: { children: ReactNode }) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  override componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Client Provider Error:', error, errorInfo);
  }

  override render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-red-50">
          <div className="text-center p-6">
            <h2 className="text-xl font-semibold text-red-800 mb-2">Something went wrong</h2>
            <p className="text-red-600 mb-4">Client provider error occurred</p>
            <button 
              onClick={() => this.setState({ hasError: false, error: null })}
              className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              Try Again
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Simple fallback toast for debugging
function SimpleFallbackToast() {
  return (
    <div 
      id="fallback-toast-container"
      style={{
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: 9999,
        pointerEvents: 'none'
      }}
    />
  );
}

// Main client providers wrapper - simplified structure
export function ClientProviders({ children }: { children: ReactNode }) {
  return (
    <SimpleErrorBoundary>
      <ThemeProvider defaultTheme="light" storageKey="ui-theme">
        <QueryProvider>
          {children}
          <SimpleFallbackToast />
          {/* Temporarily removed ToastProvider to fix webpack loading error */}
          {/* <ToastProvider /> */}
        </QueryProvider>
      </ThemeProvider>
    </SimpleErrorBoundary>
  );
}

// Auth provider wrapper - separate for pages that need auth
export function AuthProviders({ children }: { children: ReactNode }) {
  return (
    <SimpleErrorBoundary>
      <UnifiedAuthProvider fallbackToDevMode={true}>
        <QueryProvider>
          {children}
        </QueryProvider>
      </UnifiedAuthProvider>
    </SimpleErrorBoundary>
  );
}