name: Visual Regression Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

jobs:
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3001

      - name: Wait for application
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run visual regression tests
        run: npx playwright test --project=visual-regression
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-regression-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Upload visual diffs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-diffs
          path: test-results/**/diff-*.png
          retention-days: 30

      - name: Comment PR with visual changes
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find visual diff images
            const testResultsDir = 'test-results';
            const diffImages = [];
            
            function findDiffImages(dir) {
              if (!fs.existsSync(dir)) return;
              
              const files = fs.readdirSync(dir);
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                
                if (stat.isDirectory()) {
                  findDiffImages(filePath);
                } else if (file.startsWith('diff-') && file.endsWith('.png')) {
                  diffImages.push(filePath);
                }
              }
            }
            
            findDiffImages(testResultsDir);
            
            if (diffImages.length > 0) {
              let comment = `## ðŸŽ¨ Visual Regression Detected\n\n`;
              comment += `Found ${diffImages.length} visual difference(s):\n\n`;
              
              diffImages.forEach((imagePath, index) => {
                const testName = path.basename(path.dirname(imagePath));
                comment += `### ${testName}\n`;
                comment += `![Visual Diff ${index + 1}](${imagePath})\n\n`;
              });
              
              comment += `Please review the visual changes and update the baseline images if the changes are intentional.\n`;
              comment += `To update baselines, run: \`npx playwright test --update-snapshots\``;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  cross-browser-visual:
    name: Cross-Browser Visual Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3001

      - name: Wait for application
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run visual tests for ${{ matrix.browser }}
        run: npx playwright test --project=${{ matrix.browser }} --grep="visual"

      - name: Upload browser-specific results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  mobile-visual:
    name: Mobile Visual Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3001

      - name: Wait for application
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run mobile visual tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"

      - name: Upload mobile visual results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: mobile-visual-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  accessibility-visual:
    name: Accessibility Visual Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Install axe-playwright
        run: npm install @axe-core/playwright

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3001

      - name: Wait for application
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run accessibility tests
        run: |
          npx playwright test << 'EOF'
          import { test, expect } from '@playwright/test';
          import AxeBuilder from '@axe-core/playwright';
          
          test.describe('Accessibility Tests', () => {
            test('should not have accessibility violations on homepage', async ({ page }) => {
              await page.goto('http://localhost:3001');
              
              const accessibilityScanResults = await new AxeBuilder({ page })
                .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
                .analyze();
              
              expect(accessibilityScanResults.violations).toEqual([]);
            });
            
            test('should not have accessibility violations on widget', async ({ page }) => {
              await page.goto('http://localhost:3001/widget?org=test');
              await page.click('[data-testid="widget-button"]');
              await page.waitForSelector('[data-testid="chat-interface"]');
              
              const accessibilityScanResults = await new AxeBuilder({ page })
                .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
                .analyze();
              
              expect(accessibilityScanResults.violations).toEqual([]);
            });
            
            test('should not have accessibility violations on dashboard', async ({ page }) => {
              await page.goto('http://localhost:3001/dashboard/login');
              
              const accessibilityScanResults = await new AxeBuilder({ page })
                .withTags(['wcag2a', 'wcag2aa', 'wcag21aa'])
                .analyze();
              
              expect(accessibilityScanResults.violations).toEqual([]);
            });
          });
          EOF

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: accessibility-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  visual-baseline-update:
    name: Update Visual Baselines
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3001

      - name: Wait for application
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Update visual baselines
        run: npx playwright test --update-snapshots

      - name: Commit updated baselines
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add test-results/
            git add e2e/
            git commit -m "Update visual regression baselines [skip ci]"
            git push
          else
            echo "No visual baseline changes to commit"
          fi

  performance-visual-combined:
    name: Combined Performance & Visual
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3001

      - name: Wait for application
        run: npx wait-on http://localhost:3001 --timeout 60000

      - name: Run combined tests
        run: |
          # Run performance tests with visual validation
          npx playwright test << 'EOF'
          import { test, expect } from '@playwright/test';
          
          test.describe('Performance + Visual Tests', () => {
            test('widget should load quickly and look correct', async ({ page }) => {
              const startTime = Date.now();
              
              await page.goto('http://localhost:3001/widget?org=test');
              await page.waitForSelector('[data-testid="widget-button"]');
              
              const loadTime = Date.now() - startTime;
              expect(loadTime).toBeLessThan(2000); // 2 seconds
              
              // Visual validation
              await expect(page.locator('[data-testid="widget-button"]')).toHaveScreenshot('widget-button.png');
              
              // Open widget and validate
              await page.click('[data-testid="widget-button"]');
              await page.waitForSelector('[data-testid="chat-interface"]');
              
              await expect(page.locator('[data-testid="chat-interface"]')).toHaveScreenshot('chat-interface.png');
            });
            
            test('dashboard should be performant and visually consistent', async ({ page }) => {
              const startTime = Date.now();
              
              await page.goto('http://localhost:3001/dashboard/login');
              await page.waitForSelector('[data-testid="login-form"]');
              
              const loadTime = Date.now() - startTime;
              expect(loadTime).toBeLessThan(3000); // 3 seconds
              
              // Visual validation
              await expect(page.locator('[data-testid="login-form"]')).toHaveScreenshot('login-form.png');
            });
          });
          EOF

      - name: Generate combined report
        if: always()
        run: |
          echo "## ðŸš€ Combined Performance & Visual Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test-results/results.json" ]; then
            echo "### Test Results" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat test-results/results.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Widget load time: < 2s âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Dashboard load time: < 3s âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Visual Validation" >> $GITHUB_STEP_SUMMARY
          echo "- Widget button appearance: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Chat interface layout: âœ…" >> $GITHUB_STEP_SUMMARY
          echo "- Login form design: âœ…" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: combined-performance-visual
          path: |
            test-results/
            playwright-report/
          retention-days: 30
